"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Portfolio Assistant
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–∏–º –º–æ–¥—É–ª—è–º
import sys
sys.path.append('./portfolio_assistant/src')

from tools.optimize_tool import optimize_tool


def show_optimization_comparison(snapshot_data, snapshot_id, risk_free_rate, max_weight):
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    st.header("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    methods = {
        "HRP": "hrp",
        "Markowitz": "markowitz", 
        "Black-Litterman": "black_litterman"
    }
    
    with st.spinner("‚öñÔ∏è –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏..."):
        results = {}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
        for method_name, method_code in methods.items():
            try:
                result = optimize_tool(
                    method=method_code,
                    snapshot_id=snapshot_id,
                    risk_free_rate=risk_free_rate,
                    max_weight=max_weight
                )
                
                if not result.get('error'):
                    results[method_name] = result
                else:
                    st.warning(f"‚ö†Ô∏è {method_name}: {result.get('error')}")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {method_name}: {str(e)}")
    
    if not results:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
        return
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫")
    
    comparison_data = []
    for method, result in results.items():
        comparison_data.append({
            '–ú–µ—Ç–æ–¥': method,
            '–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)': f"{result.get('exp_ret', 0) * 100:.2f}",
            '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)': f"{result.get('risk', 0) * 100:.2f}",
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞': f"{result.get('sharpe', 0):.3f}",
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π': len([w for w in result.get('weights', {}).values() if w > 0.001])
        })
    
    df_comparison = pd.DataFrame(comparison_data)
    st.dataframe(df_comparison, use_container_width=True)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        # Bar chart –º–µ—Ç—Ä–∏–∫
        fig = go.Figure()
        
        metrics = ['–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞']
        
        for method, result in results.items():
            fig.add_trace(go.Bar(
                name=method,
                x=metrics,
                y=[
                    result.get('exp_ret', 0) * 100,
                    result.get('risk', 0) * 100,
                    result.get('sharpe', 0)
                ],
                opacity=0.8
            ))
        
        fig.update_layout(
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            barmode='group',
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Scatter plot —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        fig = go.Figure()
        
        colors = ['red', 'blue', 'green']
        for i, (method, result) in enumerate(results.items()):
            fig.add_trace(go.Scatter(
                x=[result.get('risk', 0) * 100],
                y=[result.get('exp_ret', 0) * 100],
                mode='markers',
                marker=dict(
                    size=15,
                    color=colors[i % len(colors)],
                    symbol='circle',
                    line=dict(width=2, color='white')
                ),
                name=method,
                hovertemplate=f'<b>{method}</b><br>–†–∏—Å–∫: %{{x:.2f}}%<br>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: %{{y:.2f}}%<extra></extra>'
            ))
        
        fig.update_layout(
            title="–ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
            xaxis_title="–†–∏—Å–∫ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å), %",
            yaxis_title="–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, %",
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
    st.subheader("‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –∞–∫—Ç–∏–≤–æ–≤")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã
    all_assets = set()
    for result in results.values():
        all_assets.update(result.get('weights', {}).keys())
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤
    weights_data = []
    for asset in sorted(all_assets):
        row = {'–ê–∫—Ç–∏–≤': asset}
        for method, result in results.items():
            weight = result.get('weights', {}).get(asset, 0)
            row[method] = weight * 100
        weights_data.append(row)
    
    df_weights = pd.DataFrame(weights_data)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤—ã —Å –≤–µ—Å–æ–º > 0.1% –≤ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º –º–µ—Ç–æ–¥–µ
    method_columns = [col for col in df_weights.columns if col != '–ê–∫—Ç–∏–≤']
    df_weights['max_weight'] = df_weights[method_columns].max(axis=1)
    df_filtered = df_weights[df_weights['max_weight'] > 0.1].copy()
    df_filtered = df_filtered.drop('max_weight', axis=1)
    df_filtered = df_filtered.sort_values(method_columns[0], ascending=False)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20 –∞–∫—Ç–∏–≤–æ–≤
    st.dataframe(df_filtered.head(20), use_container_width=True)
    
    # Heatmap –≤–µ—Å–æ–≤
    if len(df_filtered) > 0:
        fig = go.Figure(data=go.Heatmap(
            z=df_filtered[method_columns].values.T,
            x=df_filtered['–ê–∫—Ç–∏–≤'].values,
            y=method_columns,
            colorscale='Viridis',
            hovertemplate='–ê–∫—Ç–∏–≤: %{x}<br>–ú–µ—Ç–æ–¥: %{y}<br>–í–µ—Å: %{z:.2f}%<extra></extra>'
        ))
        
        fig.update_layout(
            title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–µ—Å–æ–≤ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –º–µ—Ç–æ–¥–∞–º",
            height=300,
            xaxis_title="–ê–∫—Ç–∏–≤—ã",
            yaxis_title="–ú–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    return results


def show_risk_analysis(snapshot_data, weights):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    """
    st.header("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    mu_data = snapshot_data.get('mu', {})
    sigma_data = snapshot_data.get('sigma', {})
    
    if not mu_data or not sigma_data:
        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    portfolio_return = sum(weights.get(asset, 0) * ret for asset, ret in mu_data.items())
    
    portfolio_variance = 0
    for asset1, weight1 in weights.items():
        for asset2, weight2 in weights.items():
            if asset1 in sigma_data and asset2 in sigma_data.get(asset1, {}):
                portfolio_variance += weight1 * weight2 * sigma_data[asset1][asset2]
    
    portfolio_volatility = np.sqrt(portfolio_variance) if portfolio_variance > 0 else 0
    
    with col1:
        st.metric(
            "üìà –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
            f"{portfolio_return * 100:.2f}%"
        )
    
    with col2:
        st.metric(
            "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
            f"{portfolio_volatility * 100:.2f}%"
        )
    
    with col3:
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π VaR (95%)
        var_95 = portfolio_return - 1.645 * portfolio_volatility
        st.metric(
            "‚ö†Ô∏è VaR (95%)",
            f"{var_95 * 100:.2f}%",
            help="Value at Risk - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 5%"
        )
    
    with col4:
        # –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        effective_positions = len([w for w in weights.values() if w > 0.01])
        diversification_score = min(effective_positions / 10, 1.0)  # –ú–∞–∫—Å–∏–º—É–º 10 –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        st.metric(
            "üéØ –†–µ–π—Ç–∏–Ω–≥ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            f"{diversification_score:.1%}",
            help="–ú–µ—Ä–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è (0-100%)"
        )
    
    st.markdown("---")
    
    # –ê–Ω–∞–ª–∏–∑ –≤–∫–ª–∞–¥–æ–≤ –∞–∫—Ç–∏–≤–æ–≤ –≤ —Ä–∏—Å–∫
    st.subheader("üìä –í–∫–ª–∞–¥ –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫")
    
    risk_contributions = []
    
    for asset, weight in weights.items():
        if weight > 0.001 and asset in mu_data:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –º–∞—Ä–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞ –≤ —Ä–∏—Å–∫
            marginal_risk = 0
            for other_asset, other_weight in weights.items():
                if other_asset in sigma_data.get(asset, {}):
                    marginal_risk += other_weight * sigma_data[asset][other_asset]
            
            risk_contrib = weight * marginal_risk / portfolio_variance if portfolio_variance > 0 else 0
            
            risk_contributions.append({
                '–ê–∫—Ç–∏–≤': asset,
                '–í–µ—Å (%)': weight * 100,
                '–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫ (%)': risk_contrib * 100,
                '–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)': mu_data[asset] * 100
            })
    
    df_risk = pd.DataFrame(risk_contributions)
    df_risk = df_risk.sort_values('–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫ (%)', ascending=False)
    
    # –¢–æ–ø-15 –ø–æ –≤–∫–ª–∞–¥—É –≤ —Ä–∏—Å–∫
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Bar chart –≤–∫–ª–∞–¥–æ–≤ –≤ —Ä–∏—Å–∫
        top_risk = df_risk.head(15)
        
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=top_risk['–ê–∫—Ç–∏–≤'],
            y=top_risk['–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫ (%)'],
            name='–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫',
            marker_color='lightcoral',
            opacity=0.8
        ))
        
        fig.update_layout(
            title="–¢–æ–ø-15 –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –≤–∫–ª–∞–¥—É –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫",
            xaxis_title="–ê–∫—Ç–∏–≤—ã",
            yaxis_title="–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫ (%)",
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ø —Ä–∏—Å–∫–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
        st.write("**–¢–æ–ø —Ä–∏—Å–∫–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã:**")
        st.dataframe(
            df_risk.head(10)[['–ê–∫—Ç–∏–≤', '–í–µ—Å (%)', '–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫ (%)']],
            use_container_width=True,
            height=400
        )
    
    # Scatter plot: –≤–µ—Å vs –≤–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫
    st.subheader("üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤: –≤–µ—Å vs –≤–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫")
    
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –∞–∫—Ç–∏–≤–æ–≤
    fig.add_trace(go.Scatter(
        x=df_risk['–í–µ—Å (%)'],
        y=df_risk['–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫ (%)'],
        mode='markers',
        marker=dict(
            size=df_risk['–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'] * 2,  # –†–∞–∑–º–µ—Ä –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            color=df_risk['–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'],
            colorscale='RdYlGn',
            colorbar=dict(title="–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)"),
            line=dict(width=1, color='white')
        ),
        text=df_risk['–ê–∫—Ç–∏–≤'],
        hovertemplate='<b>%{text}</b><br>–í–µ—Å: %{x:.2f}%<br>–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫: %{y:.2f}%<br>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: %{marker.color:.2f}%<extra></extra>',
        name='–ê–∫—Ç–∏–≤—ã'
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é (–∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
    max_val = max(df_risk['–í–µ—Å (%)'].max(), df_risk['–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫ (%)'].max())
    fig.add_trace(go.Scatter(
        x=[0, max_val],
        y=[0, max_val],
        mode='lines',
        line=dict(dash='dash', color='gray'),
        name='–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
        hoverinfo='skip'
    ))
    
    fig.update_layout(
        title="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–µ—Å–∞ –∞–∫—Ç–∏–≤–∞ –∏ –µ–≥–æ –≤–∫–ª–∞–¥–∞ –≤ —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
        xaxis_title="–í–µ—Å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ (%)",
        yaxis_title="–í–∫–ª–∞–¥ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫ (%)",
        height=500,
        showlegend=True
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.subheader("üí° –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–≤–µ—Å
    df_risk['risk_weight_ratio'] = df_risk['–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫ (%)'] / df_risk['–í–µ—Å (%)']
    high_risk_assets = df_risk[df_risk['risk_weight_ratio'] > 1.5].head(5)
    low_risk_assets = df_risk[df_risk['risk_weight_ratio'] < 0.5].head(5)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if not high_risk_assets.empty:
            st.warning("‚ö†Ô∏è **–ê–∫—Ç–∏–≤—ã —Å –≤—ã—Å–æ–∫–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º:**")
            for _, asset in high_risk_assets.iterrows():
                st.write(f"‚Ä¢ {asset['–ê–∫—Ç–∏–≤']}: —Ä–∏—Å–∫ {asset['risk_weight_ratio']:.1f}x –æ—Ç –≤–µ—Å–∞")
    
    with col2:
        if not low_risk_assets.empty:
            st.success("‚úÖ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤—ã (–Ω–∏–∑–∫–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫):**")
            for _, asset in low_risk_assets.iterrows():
                st.write(f"‚Ä¢ {asset['–ê–∫—Ç–∏–≤']}: —Ä–∏—Å–∫ {asset['risk_weight_ratio']:.1f}x –æ—Ç –≤–µ—Å–∞")
    
    return df_risk


def create_portfolio_report(optimization_results, performance_results, snapshot_data):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
    """
    st.header("üìã –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    meta = snapshot_data.get('meta', {})
    
    st.markdown(f"""
    ### üìä –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
    
    **–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
    
    **–°–Ω–∞–ø—à–æ—Ç –¥–∞–Ω–Ω—ã—Ö:** {meta.get('timestamp', 'N/A')[:19] if meta.get('timestamp') else 'N/A'}
    
    **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤ –≤ —Å–Ω–∞–ø—à–æ—Ç–µ:** {len(snapshot_data.get('mu', {}))}
    
    **–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞:** {meta.get('horizon_days', 'N/A')} –¥–Ω–µ–π
    
    ---
    
    ### ‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    **–ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:** {optimization_results.get('method', 'N/A')}
    
    **–û–∂–∏–¥–∞–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {optimization_results.get('exp_ret', 0) * 100:.2f}%
    
    **–ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:** {optimization_results.get('risk', 0) * 100:.2f}%
    
    **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞:** {optimization_results.get('sharpe', 0):.3f}
    
    **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:** {len([w for w in optimization_results.get('weights', {}).values() if w > 0.001])}
    
    ---
    
    ### üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    """)
    
    if performance_results and not performance_results.get('error'):
        st.markdown(f"""
        **–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:** {performance_results.get('analysis_period', 'N/A')}
        
        **–†–µ–∞–ª—å–Ω–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {performance_results.get('portfolio_return_annualized', 0) * 100:.2f}%
        
        **–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –±–µ–Ω—á–º–∞—Ä–∫–∞:** {performance_results.get('benchmark_return', 0) * 100:.2f}%
        
        **Alpha:** {performance_results.get('alpha', 0) * 100:.2f}%
        
        **Beta:** {performance_results.get('beta', 0):.3f}
        
        **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞:** {performance_results.get('max_drawdown', 0) * 100:.2f}%
        """)
    else:
        st.markdown("*–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã*")
    
    # –¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏
    weights = optimization_results.get('weights', {})
    if weights:
        top_positions = sorted(weights.items(), key=lambda x: x[1], reverse=True)[:10]
        
        st.markdown("### üèÜ –¢–æ–ø-10 –ø–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ")
        
        positions_df = pd.DataFrame([
            {'–¢–∏–∫–µ—Ä': ticker, '–í–µ—Å (%)': f"{weight * 100:.2f}%"}
            for ticker, weight in top_positions
        ])
        
        st.dataframe(positions_df, use_container_width=True)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ JSON"):
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'snapshot_meta': meta,
            'optimization_results': optimization_results,
            'performance_results': performance_results,
            'top_positions': dict(top_positions[:10]) if weights else {}
        }
        
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
            data=json.dumps(report_data, indent=2, ensure_ascii=False),
            file_name=f"portfolio_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json"
        ) 