#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ forecast_tool –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "portfolio_assistant" / "src" / "tools"))

from forecast_tool import forecast_tool

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_forecast_multiple_tickers():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º forecast_tool –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–∫–µ—Ä–∞—Ö –∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    """
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–∫–µ—Ä—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É –Ω–∞—Å –µ—Å—Ç—å –º–æ–¥–µ–ª–∏
    test_tickers = [
        'PG', 'LIN', 'MTD', 'CMI', 'NRG', 'LEN', 'RL', 'FFIV', 
        'ES', 'IP', 'NEM', 'KMB', 'ROL', 'RMD', 'AOS', 'RCL', 
        'DG', 'VMC', 'PANW', 'LDOS', 'NFLX', 'NWSA', 'KEYS', 
        'MHK', 'CPB', 'D', 'SNPS', 'T', 'JNJ', 'PKG'
    ]
    
    results = {}
    successful_forecasts = 0
    failed_forecasts = 0
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_tickers)} —Ç–∏–∫–µ—Ä–æ–≤...")
    print("="*80)
    
    for i, ticker in enumerate(test_tickers, 1):
        logger.info(f"[{i}/{len(test_tickers)}] –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä: {ticker}")
        
        try:
            result = forecast_tool(ticker=ticker)
            results[ticker] = result
            
            if result.get('error'):
                logger.error(f"‚ùå {ticker}: {result['error']}")
                failed_forecasts += 1
            elif result.get('mu') is not None:
                mu = result['mu']
                sigma = result.get('sigma', 'N/A')
                logger.info(f"‚úÖ {ticker}: mu={mu:.6f}, sigma={sigma}")
                successful_forecasts += 1
            else:
                logger.warning(f"‚ö†Ô∏è  {ticker}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                failed_forecasts += 1
                
        except Exception as e:
            logger.error(f"‚ùå {ticker}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
            results[ticker] = {"error": str(e)}
            failed_forecasts += 1
        
        print("-" * 40)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("="*80)
    logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {successful_forecasts}")
    logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {failed_forecasts}")
    logger.info(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_forecasts/(successful_forecasts+failed_forecasts))*100:.1f}%")
    
    # –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    print("\n" + "="*80)
    print("–£–°–ü–ï–®–ù–´–ï –ü–†–û–ì–ù–û–ó–´:")
    print("="*80)
    for ticker, result in results.items():
        if not result.get('error') and result.get('mu') is not None:
            mu = result['mu']
            sigma = result.get('sigma', 'N/A')
            horizon = result.get('horizon', '3 months')
            print(f"{ticker:6} | mu: {mu:8.6f} | sigma: {sigma:>8} | horizon: {horizon}")
    
    # –û—à–∏–±–∫–∏
    print("\n" + "="*80)
    print("–û–®–ò–ë–ö–ò:")
    print("="*80)
    for ticker, result in results.items():
        if result.get('error'):
            print(f"{ticker:6} | {result['error']}")
    
    return results

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è forecast_tool...")
    results = test_forecast_multiple_tickers()
    logger.info("‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 