#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è tools.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
"""

import logging
import sys
import traceback
from pathlib import Path
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_module_imports():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª—è"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª—è")
    print("="*60)
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç
        from . import (
            get_available_tickers,
            get_tool_info,
            list_all_tools,
            validate_tool_params,
            TOOLS_REGISTRY
        )
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        from . import (
            correlation_tool,
            efficient_frontier_tool,
            forecast_tool,
            optimize_tool,
            performance_tool,
            risk_analysis_tool,
            scenario_adjust_tool,
            sentiment_tool,
            index_composition_tool
        )
        print("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–µ—Å—Ç—Ä
        tools = list_all_tools()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {tools}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        traceback.print_exc()
        return False

def test_available_tickers():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
    print("="*60)
    
    try:
        from . import get_available_tickers
        
        tickers = get_available_tickers()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tickers)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
        
        if len(tickers) > 0:
            print(f"üìã –ü–µ—Ä–≤—ã–µ 10 —Ç–∏–∫–µ—Ä–æ–≤: {tickers[:10]}")
            return True, tickers
        else:
            print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ (–º–æ–¥–µ–ª–∏ CatBoost –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)")
            return False, []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
        traceback.print_exc()
        return False, []

def test_index_composition():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–∞–≤–∞ –∏–Ω–¥–µ–∫—Å–æ–≤"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–∞–≤–∞ –∏–Ω–¥–µ–∫—Å–æ–≤")
    print("="*60)
    
    try:
        from . import index_composition_tool, list_available_indices
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        indices_info = list_available_indices()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(indices_info['available_indices'])} –∏–Ω–¥–µ–∫—Å–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å–æ–≤
        test_indices = ["sp500_top10", "tech_giants", "dow30"]
        
        for index_name in test_indices:
            try:
                result = index_composition_tool(index_name, filter_available=True)
                if result.get("error"):
                    print(f"‚ö†Ô∏è  {index_name}: {result['error']}")
                else:
                    available_count = result.get("available_count", 0)
                    total_count = result.get("total_count", 0)
                    coverage = result.get("coverage_ratio", 0)
                    print(f"‚úÖ {index_name}: {available_count}/{total_count} –¥–æ—Å—Ç—É–ø–Ω–æ ({coverage:.1%} –ø–æ–∫—Ä—ã—Ç–∏–µ)")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        traceback.print_exc()
        return False

def test_tool_validation():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("="*60)
    
    try:
        from . import validate_tool_params
        
        # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        valid_result = validate_tool_params("correlation_tool", {"tickers": ["AAPL", "MSFT"]})
        if valid_result["valid"]:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∞: {valid_result}")
        
        # –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        invalid_result = validate_tool_params("correlation_tool", {})
        if not invalid_result["valid"]:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –û—à–∏–±–∫–∞: {invalid_result['error']}")
        else:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        nonexistent_result = validate_tool_params("nonexistent_tool", {})
        if not nonexistent_result["valid"]:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False

def test_correlation_tool(test_tickers):
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ correlation_tool"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ correlation_tool")
    print("="*60)
    
    if len(test_tickers) < 2:
        print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
        return False
    
    try:
        from . import correlation_tool
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        sample_tickers = test_tickers[:3]
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è: {sample_tickers}")
        
        result = correlation_tool(
            tickers=sample_tickers,
            period_days=90,  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
            correlation_type="pearson"
        )
        
        if result.get("error"):
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ correlation_tool: {result['error']}")
            return False
        else:
            print(f"‚úÖ Correlation tool —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(result.get('tickers_analyzed', []))}")
            print(f"   –ù–∞–±–ª—é–¥–µ–Ω–∏–π: {result.get('observations', 0)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = result.get('statistics', {})
            if stats:
                print(f"   –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {stats.get('mean_correlation', 0):.3f}")
                print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {stats.get('min_correlation', 0):.3f} - {stats.get('max_correlation', 0):.3f}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ correlation_tool: {e}")
        traceback.print_exc()
        return False

def test_risk_analysis_tool(test_tickers):
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ risk_analysis_tool"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ risk_analysis_tool")
    print("="*60)
    
    if len(test_tickers) < 2:
        print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤")
        return False
    
    try:
        from . import risk_analysis_tool
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –≤–µ—Å–∞–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        sample_tickers = test_tickers[:3]
        weights = {ticker: 1.0/len(sample_tickers) for ticker in sample_tickers}
        
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –¥–ª—è: {sample_tickers}")
        print(f"   –í–µ—Å–∞: {weights}")
        
        result = risk_analysis_tool(
            tickers=sample_tickers,
            weights=weights,
            confidence_level=0.95,
            horizon_days=90  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        )
        
        if result.get("error"):
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ risk_analysis_tool: {result['error']}")
            return False
        else:
            print(f"‚úÖ Risk analysis tool —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏
            individual_risks = result.get('individual_risks', {})
            print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–æ–≤: {len(individual_risks)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫
            portfolio_risk = result.get('portfolio_risk')
            if portfolio_risk:
                print(f"   –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio_risk.get('annual_return', 0):.2%}")
                print(f"   –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫: {portfolio_risk.get('annual_volatility', 0):.2%}")
                print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {portfolio_risk.get('sharpe_ratio', 0):.3f}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ risk_analysis_tool: {e}")
        traceback.print_exc()
        return False

def test_performance_tool(test_tickers):
    """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ performance_tool"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ performance_tool")
    print("="*60)
    
    if len(test_tickers) < 2:
        print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        return False
    
    try:
        from . import performance_tool
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        sample_tickers = test_tickers[:2]
        weights = {ticker: 0.5 for ticker in sample_tickers}
        
        # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        end_date = datetime.now().strftime("%Y-%m-%d")
        start_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"   –ü–æ—Ä—Ç—Ñ–µ–ª—å: {weights}")
        print(f"   –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        result = performance_tool(
            weights=weights,
            start_date=start_date,
            end_date=end_date,
            benchmark="^GSPC"
        )
        
        if result.get("error"):
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ performance_tool: {result['error']}")
            return False
        else:
            print(f"‚úÖ Performance tool —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result.get('portfolio_return_annualized', 0):.2%}")
            print(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {result.get('portfolio_volatility_annualized', 0):.2%}")
            print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {result.get('sharpe_ratio', 0):.3f}")
            print(f"   Alpha: {result.get('alpha', 0):.2%}")
            print(f"   Beta: {result.get('beta', 0):.3f}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ performance_tool: {e}")
        traceback.print_exc()
        return False

def test_forecast_tool(test_tickers):
    """–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ forecast_tool"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ forecast_tool")
    print("="*60)
    
    if len(test_tickers) < 1:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    try:
        from . import forecast_tool
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∏–∫–µ—Ä
        test_ticker = test_tickers[0]
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è: {test_ticker}")
        
        result = forecast_tool(
            ticker=test_ticker,
            lookback_days=90  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        )
        
        if result.get("error"):
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ forecast_tool: {result['error']}")
            return False
        else:
            print(f"‚úÖ Forecast tool —Ä–∞–±–æ—Ç–∞–µ—Ç")
            mu = result.get('mu')
            sigma = result.get('sigma')
            horizon = result.get('horizon', 'Unknown')
            
            if mu is not None:
                print(f"   –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (mu): {mu:.4f}")
            if sigma is not None:
                print(f"   –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∏—Å–∫–∞ (sigma): {sigma:.4f}")
            print(f"   –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {horizon}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ forecast_tool: {e}")
        traceback.print_exc()
        return False

def test_error_handling():
    """–¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    print("="*60)
    
    try:
        from . import correlation_tool, risk_analysis_tool, performance_tool
        
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        result1 = correlation_tool(tickers=[])
        if result1.get("error"):
            print("‚úÖ Correlation tool –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤")
        
        result2 = risk_analysis_tool(tickers=None)
        if result2.get("error"):
            print("‚úÖ Risk analysis tool –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç None")
        
        result3 = performance_tool(weights={})
        if result3.get("error"):
            print("‚úÖ Performance tool –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ –≤–µ—Å–∞")
        
        # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤...")
        
        result4 = correlation_tool(tickers=["NONEXISTENT1", "NONEXISTENT2"])
        if result4.get("error"):
            print("‚úÖ Correlation tool –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–∫–µ—Ä—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        traceback.print_exc()
        return False

def test_optimize_tool_basic(test_tickers):
    """–¢–µ—Å—Ç 10: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ optimize_tool"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 10: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ optimize_tool")
    print("="*60)
    
    if len(test_tickers) < 3:
        print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3)")
        return False
    
    try:
        from . import optimize_tool
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º HRP –º–µ—Ç–æ–¥ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–Ω–∞–ø—à–æ—Ç–∞)
        sample_tickers = test_tickers[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–∏–∫–µ—Ä–æ–≤
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º HRP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è: {sample_tickers}")
        
        result = optimize_tool(
            tickers=sample_tickers,
            method="hrp",
            min_weight=0.05  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å 5%
        )
        
        if result.get("error"):
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ optimize_tool: {result['error']}")
            return False
        else:
            print(f"‚úÖ Optimize tool (HRP) —Ä–∞–±–æ—Ç–∞–µ—Ç")
            weights = result.get('weights', {})
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ –≤–µ—Å–æ–≤: {len(weights)}")
            print(f"   –°—É–º–º–∞ –≤–µ—Å–æ–≤: {sum(weights.values()):.3f}")
            print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result.get('exp_ret', 0):.4f}")
            print(f"   –†–∏—Å–∫: {result.get('risk', 0):.4f}")
            print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {result.get('sharpe', 0):.3f}")
            
            return True, weights
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ optimize_tool: {e}")
        traceback.print_exc()
        return False, {}

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í –ú–û–î–£–õ–Ø TOOLS")
    print("="*60)
    
    test_results = []
    test_tickers = []
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
    result1 = test_module_imports()
    test_results.append(("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª—è", result1))
    
    if not result1:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∏–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        return False
    
    # –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
    result2, tickers = test_available_tickers()
    test_results.append(("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã", result2))
    test_tickers = tickers
    
    # –¢–µ—Å—Ç 3: –°–æ—Å—Ç–∞–≤ –∏–Ω–¥–µ–∫—Å–æ–≤
    result3 = test_index_composition()
    test_results.append(("–°–æ—Å—Ç–∞–≤ –∏–Ω–¥–µ–∫—Å–æ–≤", result3))
    
    # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    result4 = test_tool_validation()
    test_results.append(("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", result4))
    
    # –¢–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∏–∫–µ—Ä—ã)
    if len(test_tickers) > 0:
        # –¢–µ—Å—Ç 5: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        result5 = test_correlation_tool(test_tickers)
        test_results.append(("Correlation Tool", result5))
        
        # –¢–µ—Å—Ç 6: –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
        result6 = test_risk_analysis_tool(test_tickers)
        test_results.append(("Risk Analysis Tool", result6))
        
        # –¢–µ—Å—Ç 7: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        result7 = test_performance_tool(test_tickers)
        test_results.append(("Performance Tool", result7))
        
        # –¢–µ—Å—Ç 8: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        result8 = test_forecast_tool(test_tickers)
        test_results.append(("Forecast Tool", result8))
        
        # –¢–µ—Å—Ç 10: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        result10, _ = test_optimize_tool_basic(test_tickers)
        test_results.append(("Optimize Tool", result10))
    else:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
    
    # –¢–µ—Å—Ç 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    result9 = test_error_handling()
    test_results.append(("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", result9))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    passed = 0
    total = len(test_results)
    
    for test_name, result in test_results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:25} {status}")
        if result:
            passed += 1
    
    print("-" * 60)
    print(f"–í–°–ï–ì–û –¢–ï–°–¢–û–í: {total}")
    print(f"–ü–†–û–ô–î–ï–ù–û: {passed}")
    print(f"–ü–†–û–í–ê–õ–ï–ù–û: {total - passed}")
    print(f"–£–°–ü–ï–®–ù–û–°–¢–¨: {passed/total*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)