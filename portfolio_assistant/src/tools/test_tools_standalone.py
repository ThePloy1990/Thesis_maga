#!/usr/bin/env python3
"""
–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥—É–ª—è tools.
–ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

def test_basic_functionality():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üß™ –ë–ê–ó–û–í–´–ô –¢–ï–°–¢ –ú–û–î–£–õ–Ø TOOLS")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
        tools_dir = Path(__file__).parent
        
        expected_files = [
            "__init__.py",
            "correlation_tool.py", 
            "efficient_frontier_tool.py",
            "forecast_tool.py",
            "optimize_tool.py",
            "performance_tool.py",
            "risk_analysis_tool.py",
            "scenario_tool.py",
            "sentiment_tool.py",
            "index_composition_tool.py"
        ]
        
        missing_files = []
        for file in expected_files:
            if not (tools_dir / file).exists():
                missing_files.append(file)
        
        if missing_files:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
            return False
        else:
            print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ñ–∞–π–ª–æ–≤...")
        
        import py_compile
        syntax_errors = []
        
        for file in expected_files:
            try:
                py_compile.compile(str(tools_dir / file), doraise=True)
            except py_compile.PyCompileError as e:
                syntax_errors.append(f"{file}: {e}")
        
        if syntax_errors:
            print("‚ùå –û—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:")
            for error in syntax_errors:
                print(f"   {error}")
            return False
        else:
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ __init__.py
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ __init__.py...")
        
        init_file = tools_dir / "__init__.py"
        init_content = init_file.read_text()
        
        if len(init_content.strip()) == 0:
            print("‚ùå __init__.py –ø—É—Å—Ç–æ–π")
            return False
        
        expected_exports = [
            "correlation_tool",
            "efficient_frontier_tool", 
            "forecast_tool",
            "optimize_tool",
            "performance_tool",
            "risk_analysis_tool",
            "scenario_adjust_tool",
            "sentiment_tool",
            "index_composition_tool",
            "get_available_tickers",
            "TOOLS_REGISTRY"
        ]
        
        missing_exports = []
        for export in expected_exports:
            if export not in init_content:
                missing_exports.append(export)
        
        if missing_exports:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–∫—Å–ø–æ—Ä—Ç—ã: {missing_exports}")
            return False
        else:
            print("‚úÖ __init__.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π...")
        
        models_dir = project_root / "models"
        if models_dir.exists():
            model_files = list(models_dir.glob("catboost_*.cbm"))
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(model_files)} –º–æ–¥–µ–ª–µ–π CatBoost")
            
            if len(model_files) > 0:
                print(f"   –ü—Ä–∏–º–µ—Ä—ã –º–æ–¥–µ–ª–µ–π: {[f.stem for f in model_files[:3]]}")
        else:
            print("‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è models –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        
        readme_file = tools_dir / "README.md"
        if readme_file.exists():
            print("‚úÖ README.md —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ö†Ô∏è  README.md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_import_without_dependencies():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)"""
    print("\nüîå –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê (–º–æ–∂–µ—Ç –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)")
    print("=" * 50)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
        from portfolio_assistant.src.tools import list_all_tools, get_tool_info
        
        tools = list_all_tools()
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        info = get_tool_info("correlation_tool")
        if "description" in info:
            print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ correlation_tool: {info['description']}")
        
        return True
        
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è (–Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π): {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_code_quality():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
    print("=" * 50)
    
    tools_dir = Path(__file__).parent
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...")
    
    get_available_tickers_files = []
    
    for py_file in tools_dir.glob("*.py"):
        if py_file.name.startswith("test_"):
            continue
            
        try:
            content = py_file.read_text()
            if "def get_available_tickers(" in content:
                get_available_tickers_files.append(py_file.name)
        except Exception:
            continue
    
    if len(get_available_tickers_files) > 1:
        print(f"‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è get_available_tickers –Ω–∞–π–¥–µ–Ω–∞ –≤ {len(get_available_tickers_files)} —Ñ–∞–π–ª–∞—Ö:")
        for file in get_available_tickers_files:
            print(f"   - {file}")
        issues.append("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ get_available_tickers")
    else:
        print("‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è get_available_tickers")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ TODO/FIXME
    print("\nüöß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∫–æ–¥...")
    
    todo_files = []
    for py_file in tools_dir.glob("*.py"):
        if py_file.name.startswith("test_"):
            continue
            
        try:
            content = py_file.read_text().upper()
            if "TODO" in content or "FIXME" in content or "XXX" in content:
                todo_files.append(py_file.name)
        except Exception:
            continue
    
    if todo_files:
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã TODO/FIXME –≤ —Ñ–∞–π–ª–∞—Ö: {todo_files}")
        issues.append("–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∫–æ–¥")
    else:
        print("‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ TODO/FIXME")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
    print("\nüö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏...")
    
    stub_patterns = ["pass", "raise NotImplementedError", "return None"]
    stub_files = []
    
    for py_file in tools_dir.glob("*.py"):
        if py_file.name.startswith("test_"):
            continue
            
        try:
            content = py_file.read_text()
            for pattern in stub_patterns:
                if pattern in content and "def " in content:
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–≥–ª—É—à–∫–æ–π
                    lines = content.split('\n')
                    for i, line in enumerate(lines):
                        if "def " in line and i+1 < len(lines):
                            next_line = lines[i+1].strip()
                            if next_line in stub_patterns:
                                stub_files.append(py_file.name)
                                break
        except Exception:
            continue
    
    if stub_files:
        print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –≤ —Ñ–∞–π–ª–∞—Ö: {set(stub_files)}")
        issues.append("–í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏")
    else:
        print("‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—á–µ–≤–∏–¥–Ω—ã—Ö –∑–∞–≥–ª—É—à–µ–∫")
    
    if issues:
        print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞:")
        for issue in issues:
            print(f"   - {issue}")
        return False
    else:
        print("\n‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –ê–í–¢–û–ù–û–ú–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø TOOLS")
    print("=" * 60)
    
    results = []
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
    print("\n" + "üîπ" * 30 + " –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ " + "üîπ" * 30)
    basic_result = test_basic_functionality()
    results.append(("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", basic_result))
    
    # –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    quality_result = test_code_quality()
    results.append(("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞", quality_result))
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ (–º–æ–∂–µ—Ç –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
    print("\n" + "üîπ" * 30 + " –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê " + "üîπ" * 30)
    import_result = test_import_without_dependencies()
    results.append(("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è", import_result))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò –ê–í–¢–û–ù–û–ú–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:25} {status}")
        if result:
            passed += 1
    
    print("-" * 60)
    success_rate = passed / len(results) * 100
    print(f"–£–°–ü–ï–®–ù–û–°–¢–¨: {passed}/{len(results)} ({success_rate:.1f}%)")
    
    if passed == len(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
    elif passed >= len(results) - 1:  # –†–∞–∑—Ä–µ—à–∞–µ–º 1 –ø—Ä–æ–≤–∞–ª (–∏–º–ø–æ—Ä—Ç)
        print("\n‚úÖ –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ü–†–û–í–ê–õ–ï–ù–û {len(results) - passed} –¢–ï–°–¢–û–í")
        return False

if __name__ == "__main__":
    success = main()
    print(f"\n{'='*60}")
    if success:
        print("üéØ –ú–û–î–£–õ–¨ TOOLS –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
    else:
        print("üö® –ú–û–î–£–õ–¨ TOOLS –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
    print("="*60)
    
    sys.exit(0 if success else 1)