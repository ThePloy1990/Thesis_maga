#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è tools –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
–ü—Ä–æ–≤–µ—Ä—è—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

def test_tools_registry():
    """–¢–µ—Å—Ç —Ä–µ–µ—Å—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üìã –¢–ï–°–¢ –†–ï–ï–°–¢–†–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏
        import sys
        tools_path = Path(__file__).parent
        sys.path.insert(0, str(tools_path))
        
        # –ß–∏—Ç–∞–µ–º __init__.py –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è TOOLS_REGISTRY
        init_file = tools_path / "__init__.py"
        init_content = init_file.read_text()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        if "TOOLS_REGISTRY" in init_content:
            print("‚úÖ TOOLS_REGISTRY –Ω–∞–π–¥–µ–Ω –≤ __init__.py")
        else:
            print("‚ùå TOOLS_REGISTRY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–¥–µ
        expected_tools = [
            "correlation_tool",
            "efficient_frontier_tool",
            "forecast_tool",
            "optimize_tool",
            "performance_tool",
            "risk_analysis_tool",
            "scenario_tool",
            "sentiment_tool",
            "index_composition_tool"
        ]
        
        found_tools = []
        for tool in expected_tools:
            if f'"{tool}"' in init_content or f"'{tool}'" in init_content:
                found_tools.append(tool)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_tools)}/{len(expected_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = ["analysis", "optimization", "forecasting", "scenario", "data"]
        found_categories = []
        for category in categories:
            if f'"{category}"' in init_content or f"'{category}'" in init_content:
                found_categories.append(category)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_categories)}/{len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        return len(found_tools) >= len(expected_tools) * 0.8
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
        return False

def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö —Å–≤—è–∑–µ–π"""
    print("\nüìÅ –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    try:
        tools_dir = Path(__file__).parent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        required_files = {
            "__init__.py": "–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å",
            "utils.py": "–£—Ç–∏–ª–∏—Ç—ã",
            "correlation_tool.py": "–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π",
            "efficient_frontier_tool.py": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞",
            "forecast_tool.py": "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "optimize_tool.py": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "performance_tool.py": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "risk_analysis_tool.py": "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤",
            "scenario_tool.py": "–°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "sentiment_tool.py": "–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π",
            "index_composition_tool.py": "–°–æ—Å—Ç–∞–≤ –∏–Ω–¥–µ–∫—Å–æ–≤"
        }
        
        present_files = []
        for filename, description in required_files.items():
            file_path = tools_dir / filename
            if file_path.exists():
                present_files.append(filename)
                print(f"‚úÖ {filename}: {description}")
            else:
                print(f"‚ùå {filename}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
        print(f"\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏...")
        
        import_relationships = []
        
        for file_path in tools_dir.glob("*.py"):
            if file_path.name.startswith("test_"):
                continue
                
            try:
                content = file_path.read_text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ utils
                if "from .utils import" in content:
                    import_relationships.append(f"{file_path.name} ‚Üí utils.py")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
                for other_file in required_files:
                    if other_file != file_path.name:
                        module_name = other_file.replace(".py", "")
                        if f"from .{module_name} import" in content:
                            import_relationships.append(f"{file_path.name} ‚Üí {other_file}")
                            
            except Exception:
                continue
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(import_relationships)} —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏:")
        for relationship in import_relationships[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   ‚Ä¢ {relationship}")
        
        return len(present_files) >= len(required_files) * 0.8
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def test_documentation():
    """–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìö –¢–ï–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        tools_dir = Path(__file__).parent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ README
        readme_file = tools_dir / "README.md"
        if readme_file.exists():
            readme_content = readme_file.read_text()
            print(f"‚úÖ README.md —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({len(readme_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ README
            expected_sections = [
                "# Portfolio Assistant Tools",
                "## –û–±–∑–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                "correlation_tool",
                "optimize_tool",
                "forecast_tool"
            ]
            
            found_sections = 0
            for section in expected_sections:
                if section in readme_content:
                    found_sections += 1
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {found_sections}/{len(expected_sections)} –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤")
        else:
            print("‚ùå README.md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º docstrings –≤ —Ñ–∞–π–ª–∞—Ö
        python_files = list(tools_dir.glob("*_tool.py"))
        files_with_docstrings = 0
        
        for py_file in python_files:
            try:
                content = py_file.read_text()
                if '"""' in content and "Args:" in content and "Returns:" in content:
                    files_with_docstrings += 1
            except Exception:
                continue
        
        print(f"‚úÖ {files_with_docstrings}/{len(python_files)} —Ñ–∞–π–ª–æ–≤ –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–µ docstrings")
        
        return files_with_docstrings >= len(python_files) * 0.7
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        return False

def test_code_consistency():
    """–¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
    print("\nüîç –¢–ï–°–¢ –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò –ö–û–î–ê")
    print("=" * 50)
    
    try:
        tools_dir = Path(__file__).parent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        function_definitions = {}
        
        for py_file in tools_dir.glob("*.py"):
            if py_file.name.startswith("test_"):
                continue
                
            try:
                content = py_file.read_text()
                
                # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                lines = content.split('\n')
                for line in lines:
                    if line.strip().startswith('def ') and '(' in line:
                        func_name = line.strip().split('(')[0].replace('def ', '')
                        if func_name not in function_definitions:
                            function_definitions[func_name] = []
                        function_definitions[func_name].append(py_file.name)
                        
            except Exception:
                continue
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        duplicated = []
        for func_name, files in function_definitions.items():
            if len(files) > 1:
                duplicated.append((func_name, files))
        
        if duplicated:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(duplicated)} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:")
            for func_name, files in duplicated[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   ‚Ä¢ {func_name}: {files}")
        else:
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        missing_imports = []
        for py_file in tools_dir.glob("*_tool.py"):
            try:
                content = py_file.read_text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
                if "import logging" not in content:
                    missing_imports.append(f"{py_file.name}: logging")
                if "from typing import" not in content:
                    missing_imports.append(f"{py_file.name}: typing")
                    
            except Exception:
                continue
        
        if missing_imports:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã:")
            for missing in missing_imports[:3]:
                print(f"   ‚Ä¢ {missing}")
        else:
            print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        issues = len(duplicated) + len(missing_imports)
        return issues <= 2
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_models_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—è–º–∏"""
    print("\nü§ñ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ú–û–î–ï–õ–Ø–ú–ò")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ models
        models_dir = project_root / "models"
        
        if not models_dir.exists():
            print("‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è models –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –°—á–∏—Ç–∞–µ–º –º–æ–¥–µ–ª–∏ CatBoost
        model_files = list(models_dir.glob("catboost_*.cbm"))
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(model_files)} –º–æ–¥–µ–ª–µ–π CatBoost")
        
        if len(model_files) > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–∏–∫–µ—Ä–æ–≤
            tickers = []
            for model_file in model_files[:5]:
                ticker = model_file.stem.replace("catboost_", "")
                tickers.append(ticker)
            
            print(f"üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ utils.py –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
            utils_file = Path(__file__).parent / "utils.py"
            if utils_file.exists():
                utils_content = utils_file.read_text()
                if "catboost_" in utils_content and ".cbm" in utils_content:
                    print("‚úÖ utils.py –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ CatBoost")
                else:
                    print("‚ö†Ô∏è  utils.py –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ CatBoost")
            
            return True
        else:
            print("‚ö†Ô∏è  –ú–æ–¥–µ–ª–∏ CatBoost –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—è–º–∏: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø TOOLS (–ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô)")
    print("=" * 70)
    
    tests = [
        ("–†–µ–µ—Å—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", test_tools_registry),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", test_documentation),
        ("–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–¥–∞", test_code_consistency),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥–µ–ª—è–º–∏", test_models_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*70)
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:25} {status}")
        if success:
            passed += 1
    
    print("-" * 70)
    success_rate = passed / len(results) * 100
    print(f"–£–°–ü–ï–®–ù–û–°–¢–¨: {passed}/{len(results)} ({success_rate:.1f}%)")
    
    if passed == len(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ú–æ–¥—É–ª—å tools –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    elif passed >= len(results) * 0.8:
        print("\n‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û!")
        print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –º–æ–¥—É–ª—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
    else:
        print("\n‚ö†Ô∏è  –ú–ù–û–ì–û –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
        print("üö® –ú–æ–¥—É–ª—å —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    
    return passed >= len(results) * 0.8

if __name__ == "__main__":
    success = run_all_tests()
    
    print(f"\n{'='*70}")
    if success:
        print("üéØ –ú–û–î–£–õ–¨ TOOLS –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("üîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –º–µ—Å—Ç–µ")
        print("üöÄ –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    else:
        print("üö® –ú–û–î–£–õ–¨ TOOLS –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        print("üìù –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –æ—Ç—á–µ—Ç–µ –≤—ã—à–µ")
    print("="*70)
    
    sys.exit(0 if success else 1)