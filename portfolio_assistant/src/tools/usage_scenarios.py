#!/usr/bin/env python3
"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è tools.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á.
"""

import sys
import os
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING)  # –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞

def scenario_1_basic_workflow():
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–∞–∑–æ–≤—ã–π workflow –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    """
    print("üìä –°–¶–ï–ù–ê–†–ò–ô 1: –ë–∞–∑–æ–≤—ã–π workflow –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    print("=" * 60)
    
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö...")
        from portfolio_assistant.src.tools import (
            list_all_tools, 
            get_tool_info, 
            validate_tool_params,
            get_available_tickers
        )
        
        tools = list_all_tools()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        for tool in tools:
            info = get_tool_info(tool)
            print(f"   ‚Ä¢ {tool}: {info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        tickers = get_available_tickers()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tickers)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
        
        if len(tickers) >= 5:
            sample_tickers = tickers[:5]
            print(f"   üìã –ü—Ä–∏–º–µ—Ä—ã: {sample_tickers}")
        else:
            print("   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            return False
        
        # –®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print(f"\n3Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        correlation_params = {"tickers": sample_tickers}
        validation = validate_tool_params("correlation_tool", correlation_params)
        
        if validation["valid"]:
            print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è correlation_tool –≤–∞–ª–∏–¥–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation['error']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimize_params = {"tickers": sample_tickers, "method": "hrp"}
        validation = validate_tool_params("optimize_tool", optimize_params)
        
        if validation["valid"]:
            print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è optimize_tool –≤–∞–ª–∏–¥–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation['error']}")
        
        # –®–∞–≥ 4: –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–∞–≤–æ–º –∏–Ω–¥–µ–∫—Å–æ–≤
        print(f"\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        from portfolio_assistant.src.tools import index_composition_tool, list_available_indices
        
        indices_info = list_available_indices()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {len(indices_info['available_indices'])} –∏–Ω–¥–µ–∫—Å–æ–≤")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ tech_giants
        tech_composition = index_composition_tool("tech_giants", filter_available=True)
        if not tech_composition.get("error"):
            available_count = tech_composition.get("available_count", 0)
            total_count = tech_composition.get("total_count", 0)
            coverage = tech_composition.get("coverage_ratio", 0)
            print(f"‚úÖ –ò–Ω–¥–µ–∫—Å tech_giants: {available_count}/{total_count} —Ç–∏–∫–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ ({coverage:.1%})")
            
            if available_count >= 3:
                tech_tickers = tech_composition["available_tickers"][:3]
                print(f"   üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {tech_tickers}")
                return True, tech_tickers
        
        return True, sample_tickers
        
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π): {e}")
        return False, []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False, []

def scenario_2_tool_chaining():
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π 2: –¶–µ–ø–æ—á–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º
    """
    print("\nüìà –°–¶–ï–ù–ê–†–ò–ô 2: –¶–µ–ø–æ—á–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    try:
        from portfolio_assistant.src.tools import get_available_tickers
        
        tickers = get_available_tickers()
        if len(tickers) < 3:
            print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–∫–∏")
            return False
        
        sample_tickers = tickers[:4]
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å: {sample_tickers}")
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
        print(f"\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
        print("   (–≠–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–≤–∞–ª–∏ –±—ã forecast_tool –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞)")
        
        # –≠–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        forecasts = {}
        for ticker in sample_tickers:
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: forecast_tool(ticker)
            forecasts[ticker] = {
                "mu": 0.08 + hash(ticker) % 100 / 1000,  # –ü—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                "sigma": 0.15 + hash(ticker) % 50 / 1000  # –ü—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–π —Ä–∏—Å–∫
            }
        
        print("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤")
        for ticker, forecast in forecasts.items():
            print(f"   ‚Ä¢ {ticker}: Œº={forecast['mu']:.3f}, œÉ={forecast['sigma']:.3f}")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        print(f"\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        equal_weights = {ticker: 1.0/len(sample_tickers) for ticker in sample_tickers}
        print("‚úÖ –†–∞–≤–Ω–æ–≤–µ—Å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ–∑–¥–∞–Ω")
        for ticker, weight in equal_weights.items():
            print(f"   ‚Ä¢ {ticker}: {weight:.1%}")
        
        # –®–∞–≥ 3: –≠–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤
        print(f"\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        print("   (–≠–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–≤–∞–ª–∏ –±—ã risk_analysis_tool)")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        portfolio_mu = sum(forecasts[ticker]["mu"] * weight for ticker, weight in equal_weights.items())
        portfolio_sigma = (sum(forecasts[ticker]["sigma"]**2 * weight**2 for ticker, weight in equal_weights.items()))**0.5
        sharpe = portfolio_mu / portfolio_sigma if portfolio_sigma > 0 else 0
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio_mu:.2%}")
        print(f"   ‚Ä¢ –†–∏—Å–∫ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å): {portfolio_sigma:.2%}")
        print(f"   ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {sharpe:.3f}")
        
        # –®–∞–≥ 4: –≠–º—É–ª—è—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        print(f"\n4Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        print("   (–≠–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–≤–∞–ª–∏ –±—ã optimize_tool)")
        
        # –ü—Ä–æ—Å—Ç–∞—è "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è" - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–π –≤–µ—Å –∞–∫—Ç–∏–≤—É —Å –ª—É—á—à–∏–º Sharpe
        individual_sharpes = {ticker: forecasts[ticker]["mu"] / forecasts[ticker]["sigma"] 
                             for ticker in sample_tickers}
        best_ticker = max(individual_sharpes.keys(), key=lambda x: individual_sharpes[x])
        
        optimized_weights = {ticker: 0.1 for ticker in sample_tickers}
        optimized_weights[best_ticker] = 0.7  # –ë–æ–ª—å—à–∏–π –≤–µ—Å –ª—É—á—à–µ–º—É –∞–∫—Ç–∏–≤—É
        
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"   ‚Ä¢ –õ—É—á—à–∏–π –∞–∫—Ç–∏–≤ –ø–æ Sharpe: {best_ticker} ({individual_sharpes[best_ticker]:.3f})")
        for ticker, weight in optimized_weights.items():
            print(f"   ‚Ä¢ {ticker}: {weight:.1%}")
        
        # –®–∞–≥ 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
        print(f"\n5Ô∏è‚É£ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π...")
        
        opt_portfolio_mu = sum(forecasts[ticker]["mu"] * weight for ticker, weight in optimized_weights.items())
        opt_portfolio_sigma = (sum(forecasts[ticker]["sigma"]**2 * weight**2 for ticker, weight in optimized_weights.items()))**0.5
        opt_sharpe = opt_portfolio_mu / opt_portfolio_sigma if opt_portfolio_sigma > 0 else 0
        
        print("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"   üìä –†–∞–≤–Ω–æ–≤–µ—Å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:")
        print(f"      –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio_mu:.2%}, –†–∏—Å–∫: {portfolio_sigma:.2%}, Sharpe: {sharpe:.3f}")
        print(f"   üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:")
        print(f"      –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {opt_portfolio_mu:.2%}, –†–∏—Å–∫: {opt_portfolio_sigma:.2%}, Sharpe: {opt_sharpe:.3f}")
        
        improvement = opt_sharpe - sharpe
        print(f"   üéØ –£–ª—É—á—à–µ–Ω–∏–µ Sharpe: {improvement:+.3f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ü–µ–ø–æ—á–∫–∏: {e}")
        return False

def scenario_3_error_handling():
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    print("\nüö® –°–¶–ï–ù–ê–†–ò–ô 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("=" * 60)
    
    try:
        from portfolio_assistant.src.tools import validate_tool_params
        
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        # –¢–µ—Å—Ç 1: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        result1 = validate_tool_params("correlation_tool", {})
        if not result1["valid"]:
            print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {result1['error']}")
        
        # –¢–µ—Å—Ç 2: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        result2 = validate_tool_params("nonexistent_tool", {"param": "value"})
        if not result2["valid"]:
            print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {result2['error']}")
        
        # –¢–µ—Å—Ç 3: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        result3 = validate_tool_params("correlation_tool", {"tickers": ["AAPL", "MSFT"]})
        if result3["valid"]:
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        
        print("\n2Ô∏è‚É£ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è graceful degradation...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        from portfolio_assistant.src.tools import get_available_tickers
        
        tickers = get_available_tickers()
        if len(tickers) == 0:
            print("‚úÖ –ú–æ–¥—É–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–æ–¥–µ–ª–µ–π")
        else:
            print(f"‚úÖ –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {len(tickers)} –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏")
        
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º...")
        
        # –≠–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        edge_cases = [
            ("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤", {"tickers": []}),
            ("None –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞", {"tickers": None}),
            ("–°—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞", {"tickers": "AAPL"}),
            ("–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫", {"tickers": ["TICK" + str(i) for i in range(1000)]})
        ]
        
        for case_name, params in edge_cases:
            try:
                result = validate_tool_params("correlation_tool", params)
                if not result["valid"]:
                    print(f"‚úÖ {case_name}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω - {result.get('error', 'unknown error')[:50]}...")
                else:
                    print(f"‚ö†Ô∏è  {case_name}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            except Exception as e:
                print(f"‚úÖ {case_name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ - {str(e)[:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

def scenario_4_metadata_usage():
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
    """
    print("\nüîç –°–¶–ï–ù–ê–†–ò–ô 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        from portfolio_assistant.src.tools import (
            get_tool_info, 
            get_tools_by_category, 
            TOOLS_REGISTRY
        )
        
        print("\n1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        categories = set()
        for tool_name, tool_info in TOOLS_REGISTRY.items():
            categories.add(tool_info.get("category", "unknown"))
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {sorted(categories)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category in sorted(categories):
            tools_in_category = get_tools_by_category(category)
            print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' ({len(tools_in_category)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤):")
            
            for tool_name, tool_info in tools_in_category.items():
                description = tool_info.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                required_params = tool_info.get("required_params", [])
                optional_params = tool_info.get("optional_params", [])
                
                print(f"   ‚Ä¢ {tool_name}:")
                print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                print(f"     –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {required_params}")
                print(f"     –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {len(optional_params)} —à—Ç.")
        
        print("\n2Ô∏è‚É£ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ workflow –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        workflow_steps = []
        
        # –®–∞–≥ 1: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏)
        for tool_name, tool_info in TOOLS_REGISTRY.items():
            if not tool_info.get("required_params"):
                workflow_steps.append((1, tool_name, "–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"))
        
        # –®–∞–≥ 2: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ç–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä—ã
        for tool_name, tool_info in TOOLS_REGISTRY.items():
            required = tool_info.get("required_params", [])
            if required and set(required) <= {"tickers", "ticker"}:
                workflow_steps.append((2, tool_name, "–¢—Ä–µ–±—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä—ã"))
        
        # –®–∞–≥ 3: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for tool_name, tool_info in TOOLS_REGISTRY.items():
            required = tool_info.get("required_params", [])
            if required and not set(required) <= {"tickers", "ticker"}:
                workflow_steps.append((3, tool_name, f"–¢—Ä–µ–±—É–µ—Ç: {required}"))
        
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π workflow –ø–æ—Å—Ç—Ä–æ–µ–Ω:")
        for step, tool_name, description in sorted(workflow_steps):
            print(f"   –®–∞–≥ {step}: {tool_name} - {description}")
        
        print("\n3Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ
        compatible_pairs = []
        
        tools_producing_weights = ["optimize_tool"]  # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –≤–µ—Å–∞
        tools_consuming_weights = []
        
        for tool_name, tool_info in TOOLS_REGISTRY.items():
            required = tool_info.get("required_params", [])
            if "weights" in required:
                tools_consuming_weights.append(tool_name)
        
        for producer in tools_producing_weights:
            for consumer in tools_consuming_weights:
                compatible_pairs.append((producer, consumer))
        
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        for producer, consumer in compatible_pairs:
            print(f"   {producer} ‚Üí {consumer}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def run_all_scenarios():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–¶–ï–ù–ê–†–ò–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ú–û–î–£–õ–Ø TOOLS")
    print("=" * 80)
    
    scenarios = [
        ("–ë–∞–∑–æ–≤—ã–π workflow", scenario_1_basic_workflow),
        ("–¶–µ–ø–æ—á–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", scenario_2_tool_chaining),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", scenario_3_error_handling),
        ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", scenario_4_metadata_usage)
    ]
    
    results = []
    
    for scenario_name, scenario_func in scenarios:
        print(f"\n{'='*20} {scenario_name.upper()} {'='*20}")
        try:
            if scenario_func == scenario_1_basic_workflow:
                success, _ = scenario_func()
            else:
                success = scenario_func()
            results.append((scenario_name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ '{scenario_name}': {e}")
            results.append((scenario_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–ò –°–¶–ï–ù–ê–†–ò–ï–í –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    passed = 0
    for scenario_name, success in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{scenario_name:25} {status}")
        if success:
            passed += 1
    
    print("-" * 80)
    success_rate = passed / len(results) * 100
    print(f"–£–°–ü–ï–®–ù–û–°–¢–¨: {passed}/{len(results)} ({success_rate:.1f}%)")
    
    if passed == len(results):
        print("\nüéâ –í–°–ï –°–¶–ï–ù–ê–†–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üîß –ú–æ–¥—É–ª—å tools –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    elif passed >= len(results) * 0.75:
        print("\n‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –°–¶–ï–ù–ê–†–ò–ï–í –£–°–ü–ï–®–ù–´!")
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    else:
        print("\n‚ö†Ô∏è  –ú–ù–û–ì–û –ü–†–û–ë–õ–ï–ú –í –°–¶–ï–ù–ê–†–ò–Ø–•")
        print("üö® –ú–æ–¥—É–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏")
    
    return passed == len(results)

if __name__ == "__main__":
    success = run_all_scenarios()
    
    print(f"\n{'='*80}")
    if success:
        print("üéØ –ú–û–î–£–õ–¨ TOOLS –ü–†–û–®–ï–õ –í–°–ï –°–¶–ï–ù–ê–†–ò–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø!")
        print("üöÄ –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("üîß –ú–û–î–£–õ–¨ TOOLS –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –†–ê–ë–û–¢–´")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤—ã—à–µ")
    print("="*80)
    
    sys.exit(0 if success else 1)