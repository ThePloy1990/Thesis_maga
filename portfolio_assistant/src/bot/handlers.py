import json
import logging
import re
from typing import Dict, Any, List, Optional, Tuple

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import CallbackContext, ContextTypes

from .config import DISCLAIMER
from .state import (
    get_user_state,
    save_user_state,
    update_dialog_memory,
    reset_user_state,
    update_risk_profile,
    update_budget,
    update_positions,
    update_snapshot_id
)
from .reply import (
    send_markdown,
    send_typing_action,
    send_portfolio_response
)
from .agent_integration import (
    run_portfolio_manager,
    build_snapshot,
    get_latest_snapshot_info
)

logger = logging.getLogger(__name__)

# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
START_MESSAGE = """
*–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç* üöÄ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:
‚Ä¢ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –°—Ü–µ–Ω–∞—Ä–Ω—ã–º –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/risk - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å
/budget - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç
/positions - –ó–∞–¥–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
/snapshot - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
/update - –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
"–°–æ–±–µ—Ä–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ AAPL, MSFT –∏ BTC –Ω–∞ 1 –º–µ—Å—è—Ü"
"–ß—Ç–æ –¥—É–º–∞–µ—à—å –ø—Ä–æ Tesla?"
"–ü–æ–º–µ–Ω—è–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ BTC –Ω–∞ +5%"
"""

HELP_MESSAGE = """
*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/reset - –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
/risk `conservative/moderate/aggressive` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å
/budget `10000` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç –≤ USD (–¥–æ 1 –º–ª–Ω)
/positions - –ó–∞–¥–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ —Å JSON)

üìä *–°–Ω–∞–ø—à–æ—Ç—ã:*
/snapshot - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–Ω–∞–ø—à–æ—Ç–µ
/update - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–°–æ–±–µ—Ä–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ AAPL, MSFT –∏ BTC"
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö Tesla"
‚Ä¢ "–°–¥–µ–ª–∞–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —Ä–æ—Å—Ç–æ–º AAPL –Ω–∞ 10%"
‚Ä¢ "–ö–∞–∫–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ —É –º–æ–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –º–æ–∏—Ö –∞–∫—Ç–∏–≤–æ–≤"
"""

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started the bot")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–Ω–∞–ø—à–æ—Ç–µ
    snapshot_info = await get_latest_snapshot_info()
    
    message = START_MESSAGE
    if snapshot_info.get("snapshot_id"):
        message += f"\n\n*–¢–µ–∫—É—â–∏–π —Å–Ω–∞–ø—à–æ—Ç:* `{snapshot_info['snapshot_id']}`"
        message += f"\n*–î–∞—Ç–∞:* `{snapshot_info['timestamp']}`"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_markdown(update, context, message, add_disclaimer=False)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    state = get_user_state(user_id)
    save_user_state(user_id, state)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested help")
    
    await send_markdown(update, context, HELP_MESSAGE, add_disclaimer=False)

async def risk_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /risk.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    args = context.args
    
    if not args or len(args) != 1 or args[0] not in ['conservative', 'moderate', 'aggressive']:
        await send_markdown(
            update, 
            context, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: `/risk conservative`, `/risk moderate` –∏–ª–∏ `/risk aggressive`", 
            add_disclaimer=False
        )
        return
    
    risk_profile = args[0].lower()
    logger.info(f"User {user_id} set risk profile to {risk_profile}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_risk_profile(user_id, risk_profile)
    
    await send_markdown(
        update, 
        context, 
        f"üîÑ –í–∞—à —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ *{risk_profile}*", 
        add_disclaimer=False
    )

async def budget_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /budget.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    args = context.args
    
    if not args or len(args) < 1:
        await send_markdown(
            update, 
            context, 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –≤ USD, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/budget 50000`", 
            add_disclaimer=False
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º
    confirm = False
    if len(args) > 1 and args[-1].lower() in ["confirm=yes", "confirm", "yes"]:
        confirm = True
        budget_str = args[0]
    else:
        budget_str = args[0]
    
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        budget_str = budget_str.replace('$', '').replace(',', '')
        budget = float(budget_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –±—é–¥–∂–µ—Ç
        if budget > 1000000 and not confirm:
            await send_markdown(
                update, 
                context, 
                f"‚ö†Ô∏è –ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 000 000 USD. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/budget {budget} confirm=yes`", 
                add_disclaimer=False
            )
            return
        
        logger.info(f"User {user_id} set budget to {budget}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_budget(user_id, budget)
        
        await send_markdown(
            update, 
            context, 
            f"üí∞ –í–∞—à –±—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *${budget:,.2f}*", 
            add_disclaimer=False
        )
    except ValueError:
        await send_markdown(
            update, 
            context, 
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—é–¥–∂–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/budget 50000`", 
            add_disclaimer=False
        )

async def positions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /positions.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JSON –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    positions = {}
    json_start = text.find('{')
    
    if json_start != -1:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        json_text = text[json_start:]
        try:
            positions = json.loads(json_text)
            logger.info(f"User {user_id} set positions from JSON: {positions}")
        except json.JSONDecodeError:
            await send_markdown(
                update, 
                context, 
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å JSON —Å –ø–æ–∑–∏—Ü–∏—è–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.", 
                add_disclaimer=False
            )
            return
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç JSON, –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        state = get_user_state(user_id)
        positions = state.get("positions", {})
        
        if not positions:
            await send_markdown(
                update, 
                context, 
                """
*–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç*

–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
```
/positions {"AAPL": 10, "MSFT": 5, "BTC": 0.1}
```
–ì–¥–µ –∫–ª—é—á - —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü.
                """,
                add_disclaimer=False
            )
            return
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (–∏–∑ JSON –∏–ª–∏ –∏–∑ state), –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
    if positions:
        update_positions(user_id, positions)
        
        positions_text = "*–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n"
        for ticker, amount in positions.items():
            positions_text += f"‚Ä¢ *{ticker}*: {amount}\n"
        
        await send_markdown(
            update, 
            context, 
            positions_text, 
            add_disclaimer=False
        )

async def snapshot_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /snapshot.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested snapshot info")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–Ω–∞–ø—à–æ—Ç–µ
    await send_typing_action(update, context)
    snapshot_info = await get_latest_snapshot_info()
    
    if snapshot_info.get("error"):
        await send_markdown(
            update, 
            context, 
            f"‚ùå {snapshot_info['error']}", 
            add_disclaimer=False
        )
        return
    
    snapshot_id = snapshot_info["snapshot_id"]
    timestamp = snapshot_info["timestamp"]
    tickers = snapshot_info["tickers"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_snapshot_id(user_id, snapshot_id)
    
    message = f"""
*–¢–µ–∫—É—â–∏–π —Å–Ω–∞–ø—à–æ—Ç:* `{snapshot_id}`
*–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* `{timestamp}`
*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ä–æ–≤:* {len(tickers) if tickers else 0}
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    if tickers and len(tickers) > 0:
        sample_tickers = tickers[:5]
        message += f"\n*–ü—Ä–∏–º–µ—Ä—ã —Ç–∏–∫–µ—Ä–æ–≤:* {', '.join(sample_tickers)}"
        if len(tickers) > 5:
            message += f" –∏ –µ—â–µ {len(tickers) - 5}"
    
    message += "\n\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /update"
    
    await send_markdown(update, context, message, add_disclaimer=False)

async def update_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested snapshot update")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await send_markdown(
        update, 
        context, 
        "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞...", 
        add_disclaimer=False
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞
    await send_typing_action(update, context)
    result = await build_snapshot()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await send_markdown(
        update, 
        context, 
        f"‚úÖ {result}", 
        add_disclaimer=False
    )

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested state reset")
    
    reset_user_state(user_id)
    
    await send_markdown(
        update, 
        context, 
        "üîÑ –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω—ã.", 
        add_disclaimer=False
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    update_dialog_memory(user_id, message_text, role="user")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = get_user_state(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await send_typing_action(update, context)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
    response_text, image_paths = await run_portfolio_manager(message_text, state)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    update_dialog_memory(user_id, response_text, role="assistant")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_portfolio_response(update, context, response_text, image_paths)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    query = update.callback_query
    user_id = query.from_user.id
    callback_data = query.data
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await query.answer(text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    if callback_data == "action=reeval":
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º
        state = get_user_state(user_id)
        last_message = None
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        for msg in reversed(state.get("dialog_memory", [])):
            if msg.get("role") == "user":
                last_message = msg.get("content")
                break
        
        if last_message:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            try:
                await context.bot.send_chat_action(
                    chat_id=query.message.chat_id,
                    action="typing"
                )
            except Exception as e:
                logger.error(f"Error sending typing action: {str(e)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
            response_text, image_paths = await run_portfolio_manager(last_message, state)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            for i in range(len(state.get("dialog_memory", [])) - 1, -1, -1):
                if state["dialog_memory"][i].get("role") == "assistant":
                    state["dialog_memory"][i]["content"] = response_text
                    save_user_state(user_id, state)
                    break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data="action=reeval"),
                    InlineKeyboardButton("üìà –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="action=plot")
                ],
                [
                    InlineKeyboardButton("‚ôªÔ∏è –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞", callback_data="action=rebalance")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            full_text = response_text
            if DISCLAIMER not in response_text:
                full_text = f"{response_text}\n\n{DISCLAIMER}"
                
            try:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=full_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
                
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if image_paths:
                    for i, img_path in enumerate(image_paths):
                        caption = f"–ì—Ä–∞—Ñ–∏–∫ {i+1}/{len(image_paths)}" if len(image_paths) > 1 else None
                        with open(img_path, 'rb') as photo:
                            await context.bot.send_photo(
                                chat_id=query.message.chat_id,
                                photo=photo,
                                caption=caption,
                                parse_mode=ParseMode.MARKDOWN if caption else None
                            )
            except Exception as e:
                logger.error(f"Error sending response: {str(e)}")
                try:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
                    )
                except:
                    pass
        else:
            try:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"Error sending error message: {str(e)}")
    
    elif callback_data == "action=plot":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        try:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏...",
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"Error sending plot message: {str(e)}")
        
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤
        
    elif callback_data == "action=rebalance":
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
        try:
            await context.bot.send_chat_action(
                chat_id=query.message.chat_id,
                action="typing"
            )
        except Exception as e:
            logger.error(f"Error sending typing action: {str(e)}")
        
        state = get_user_state(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
        rebalance_text = "–°–¥–µ–ª–∞–π —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –º–æ–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
        response_text, image_paths = await run_portfolio_manager(rebalance_text, state)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data="action=reeval"),
                InlineKeyboardButton("üìà –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="action=plot")
            ],
            [
                InlineKeyboardButton("‚ôªÔ∏è –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞", callback_data="action=rebalance")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        full_text = response_text
        if DISCLAIMER not in response_text:
            full_text = f"{response_text}\n\n{DISCLAIMER}"
            
        try:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=full_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if image_paths:
                for i, img_path in enumerate(image_paths):
                    caption = f"–ì—Ä–∞—Ñ–∏–∫ {i+1}/{len(image_paths)}" if len(image_paths) > 1 else None
                    with open(img_path, 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=query.message.chat_id,
                            photo=photo,
                            caption=caption,
                            parse_mode=ParseMode.MARKDOWN if caption else None
                        )
        except Exception as e:
            logger.error(f"Error sending rebalance response: {str(e)}")
            try:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {str(e)}"
                )
            except:
                pass
        
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data
        await query.answer(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    logger.error(f"Update {update} caused error {context.error}")
    
    try:
        if update and update.effective_chat:
            await send_markdown(
                update, 
                context, 
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:\n`{str(context.error)}`", 
                add_disclaimer=False
            )
    except Exception as e:
        logger.error(f"Error in error handler: {str(e)}") 