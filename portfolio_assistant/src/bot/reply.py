import os
import uuid
import logging
from typing import List, Optional, Dict, Any, Union
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import CallbackContext

from .config import DISCLAIMER, PLOTS_TMP

logger = logging.getLogger(__name__)

async def send_markdown(update: Update, context: CallbackContext, text: str, 
                      add_disclaimer: bool = True, 
                      reply_markup: Optional[InlineKeyboardMarkup] = None) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        add_disclaimer: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        
    Returns:
        ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        full_text = text
        if add_disclaimer and DISCLAIMER not in text:
            full_text = f"{text}\n\n{DISCLAIMER}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=full_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        return message.message_id
    except Exception as e:
        logger.error(f"Error sending markdown message: {str(e)}")
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ markdown –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –¢–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n{text}"
            )
            return message.message_id
        except Exception as e2:
            logger.error(f"Error sending fallback message: {str(e2)}")
            return 0

async def send_photo(update: Update, context: CallbackContext, 
                   photo_path: str, 
                   caption: Optional[str] = None, 
                   reply_markup: Optional[InlineKeyboardMarkup] = None) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        photo_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        caption: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        reply_markup: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        
    Returns:
        ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        with open(photo_path, 'rb') as photo:
            message = await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=caption,
                parse_mode=ParseMode.MARKDOWN if caption else None,
                reply_markup=reply_markup
            )
            return message.message_id
    except Exception as e:
        logger.error(f"Error sending photo {photo_path}: {str(e)}")
        await send_markdown(
            update,
            context,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {str(e)}",
            add_disclaimer=False
        )
        return 0

async def send_typing_action(update: Update, context: CallbackContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    try:
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )
    except Exception as e:
        logger.error(f"Error sending typing action: {str(e)}")

async def send_portfolio_response(update: Update, context: CallbackContext, 
                                markdown_text: str, 
                                image_paths: List[str] = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        markdown_text: Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        image_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data="action=reeval"),
            InlineKeyboardButton("üìà –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="action=plot")
        ],
        [
            InlineKeyboardButton("‚ôªÔ∏è –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞", callback_data="action=rebalance")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await send_markdown(update, context, markdown_text, add_disclaimer=True, reply_markup=reply_markup)
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if image_paths:
        for i, img_path in enumerate(image_paths):
            caption = f"–ì—Ä–∞—Ñ–∏–∫ {i+1}/{len(image_paths)}" if len(image_paths) > 1 else None
            await send_photo(update, context, img_path, caption=caption)

def generate_tmp_file_path(extension: str = 'png') -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
    
    Args:
        extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        
    Returns:
        –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    file_name = f"{uuid.uuid4()}.{extension}"
    return os.path.join(PLOTS_TMP, file_name) 