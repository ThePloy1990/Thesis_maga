import os
import logging
import json
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import openai
import sqlite3
import sys
sys.path.insert(0, os.path.dirname(__file__))
from portfolio_optimizer import load_price_data, calculate_returns, optimize_portfolio, calculate_var_cvar, backtest_strategy
from visualization import (
    create_performance_chart,
    create_allocation_pie,
    create_reports_csv,
    create_reports_excel,
    create_pdf_report,
    get_dashboard_link
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–µ—Å–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω JSON)
PORTFOLIO_RESULTS_FILE = "portfolio_results.json"
try:
    with open(PORTFOLIO_RESULTS_FILE, "r", encoding="utf-8") as f:
        portfolio_results = json.load(f)
except Exception:
    portfolio_results = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute(
    '''CREATE TABLE IF NOT EXISTS users (
         telegram_id TEXT PRIMARY KEY,
         name TEXT,
         email TEXT,
         risk_tolerance TEXT,
         horizon TEXT,
         goal TEXT
     )'''
)
conn.commit()

async def process_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get('registration_step')
    text = update.message.text
    # –®–∞–≥ 0: –∏–º—è
    if step == 0:
        context.user_data['profile']['name'] = text
        context.user_data['registration_step'] = 1
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    # –®–∞–≥ 1: email
    elif step == 1:
        email = text if text != '-' else None
        context.user_data['profile']['email'] = email
        context.user_data['registration_step'] = 2
        await update.message.reply_text("–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–∏—Å–∫-—Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å? (–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è):")
    # –®–∞–≥ 2: —Ä–∏—Å–∫
    elif step == 2:
        context.user_data['profile']['risk_tolerance'] = text
        context.user_data['registration_step'] = 3
        await update.message.reply_text("–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –≥–æ–¥, 5 –ª–µ—Ç):")
    # –®–∞–≥ 3: –≥–æ—Ä–∏–∑–æ–Ω—Ç
    elif step == 3:
        context.user_data['profile']['horizon'] = text
        context.user_data['registration_step'] = 4
        await update.message.reply_text("–ö–∞–∫–∞—è –≤–∞—à–∞ —Ü–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è? (—Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞/–¥–æ–ø. –¥–æ—Ö–æ–¥/—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ):")
    # –®–∞–≥ 4: —Ü–µ–ª—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    elif step == 4:
        context.user_data['profile']['goal'] = text
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
        user_id = str(update.message.from_user.id)
        prof = context.user_data['profile']
        cursor.execute(
            'INSERT INTO users VALUES (?,?,?,?,?,?)',
            (user_id, prof['name'], prof['email'], prof['risk_tolerance'], prof['horizon'], prof['goal'])
        )
        conn.commit()
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('registration_step', None)
        context.user_data.pop('profile', None)
    return

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register."
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /register –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.message.from_user.id)
    cursor.execute("SELECT * FROM users WHERE telegram_id=?", (user_id,))
    if cursor.fetchone():
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    context.user_data['registration_step'] = 0
    context.user_data['profile'] = {}
    await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ LLM"""
    # –ï—Å–ª–∏ –∏–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥–∏ –æ–ø—Ä–æ—Å–∞
    if context.user_data.get('registration_step') is not None:
        return await process_registration(update, context)
    user_text = update.message.text
    messages = [
        {"role": "system", "content": (
            "–í—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è. "
            "–û—Ç–≤–µ—á–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏. "
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è, –≤–µ–∂–ª–∏–≤–æ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å —ç—Ç–æ–π —Ç–µ–º–æ–π."
        )}
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if portfolio_results:
        messages.append({
            "role": "system",
            "content": (
                f"–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: "
                f"{json.dumps(portfolio_results, ensure_ascii=False)}"
            )
        })
    messages.append({"role": "user", "content": user_text})

    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.2,
            max_tokens=500,
        )
        answer = response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM."    

    await update.message.reply_text(answer)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="menu_portfolio")],
        [InlineKeyboardButton("‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="menu_optimize")],
        [InlineKeyboardButton("üìù –û—Ç—á—ë—Ç—ã", callback_data="menu_reports")],
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="menu_notifications")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    query = update.callback_query
    await query.answer()
    data = query.data
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    if data == "menu_portfolio":
        if portfolio_results:
            text = (
                f"üè¶ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio_results['expected_return']*100:.2f}%\n"
                f"üìâ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {portfolio_results['expected_volatility']*100:.2f}%\n"
                f"üìà Sharpe Ratio: {portfolio_results['sharpe_ratio']:.2f}\n"
                "üì¶ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞:\n" +
                "\n".join([f"{k}: {v*100:.1f}%" for k,v in portfolio_results['optimal_weights'].items()])
            )
        else:
            text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é."
        await query.edit_message_text(text)
    elif data == "menu_optimize":
        keyboard = [
            [InlineKeyboardButton("Max Sharpe", callback_data="opt_sharpe")],
            [InlineKeyboardButton("Max Return", callback_data="opt_return")],
            [InlineKeyboardButton("Min Volatility", callback_data="opt_volatility")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data in ["opt_sharpe","opt_return","opt_volatility"]:
        proc_map = {
            'opt_sharpe': ('–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ Sharpe', 'max_sharpe'),
            'opt_return': ('–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞', 'target_return'),
            'opt_volatility': ('–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏', 'min_volatility')
        }
        description, objective = proc_map[data]
        await query.edit_message_text(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è {description}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        try:
            import glob
            csv_files = glob.glob('data/sp500_ml_ready*.csv')
            if not csv_files:
                raise FileNotFoundError('CSV —Å —Ü–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            latest_csv = max(csv_files, key=os.path.getctime)
            prices = load_price_data(latest_csv)
            if objective == 'target_return':
                target = 0.1  # –ø—Ä–∏–º–µ—Ä —Ç–∞—Ä–≥–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ 10%
                result = optimize_portfolio(prices, objective=objective, target_return=target)
            else:
                result = optimize_portfolio(prices, objective=objective)
            var, cvar = calculate_var_cvar(calculate_returns(prices), result['weights'], alpha=0.05)
            new_results = {
                'optimal_weights': result['weights'],
                'expected_return': result['expected_return'],
                'expected_volatility': result['volatility'],
                'sharpe_ratio': result['sharpe_ratio'],
                'risk_metrics': {'var_95': var, 'cvar_95': cvar}
            }
            with open(PORTFOLIO_RESULTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(new_results, f, ensure_ascii=False, indent=2)
            global portfolio_results
            portfolio_results = new_results
            lines = [
                f"üè¶ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result['expected_return']*100:.2f}%",
                f"üìâ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {result['volatility']*100:.2f}%",
                f"üìà Sharpe Ratio: {result['sharpe_ratio']:.2f}",
                f"VaR (95%): {var:.4f}",
                f"CVaR (95%): {cvar:.4f}",
                "üì¶ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞:"
            ]
            for ticker, w in result['weights'].items():
                lines.append(f"{ticker}: {w*100:.1f}%")
            text = "\n".join(lines)
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}"
        await query.edit_message_text(text)
    elif data == "menu_reports":
        await query.edit_message_text("üìÑ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç... (–∑–∞–≥–ª—É—à–∫–∞)")
    elif data == "menu_notifications":
        await query.edit_message_text("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏... (–∑–∞–≥–ª—É—à–∫–∞)")
    elif data == "menu_settings":
        await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è... (–∑–∞–≥–ª—É—à–∫–∞)")
    elif data == "menu_help":
        help_text = (
            "/start - –Ω–∞—á–∞—Ç—å –±–æ—Ç–∞\n"
            "/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
            "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "–í –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã –æ–ø—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º."
        )
        await query.edit_message_text(help_text)
    elif data == "menu_back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="menu_portfolio")],
            [InlineKeyboardButton("‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="menu_optimize")],
            [InlineKeyboardButton("üìù –û—Ç—á—ë—Ç—ã", callback_data="menu_reports")],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="menu_notifications")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")]
        ]
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY.")
        return

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main() 