import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import json
import os
from datetime import datetime, timedelta
import yfinance as yf

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üöÄ Portfolio Assistant",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
import sys
sys.path.insert(0, os.path.abspath('.'))
sys.path.insert(0, os.path.abspath('./portfolio_assistant'))
sys.path.insert(0, os.path.abspath('./portfolio_assistant/src'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
try:
    from portfolio_assistant.src.tools.optimize_tool import optimize_tool
    from portfolio_assistant.src.tools.performance_tool import performance_tool
    from portfolio_assistant.src.tools.forecast_tool import forecast_tool
    from portfolio_assistant.src.market_snapshot.registry import SnapshotRegistry
except ImportError as e:
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    try:
        sys.path.append('./portfolio_assistant/src')
        from tools.optimize_tool import optimize_tool
        from tools.performance_tool import performance_tool
        from tools.forecast_tool import forecast_tool
        from market_snapshot.registry import SnapshotRegistry
    except ImportError as e2:
        st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e2}")
        st.stop()

# –ò–º–ø–æ—Ä—Ç Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
try:
    from telegram_integration import (
        send_portfolio_report_sync,
        test_telegram_sync,
        validate_telegram_chat_id
    )
    TELEGRAM_AVAILABLE = True
except ImportError as e:
    st.warning("‚ö†Ô∏è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤.")
    TELEGRAM_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
try:
    from portfolio_assistant.src.bot.state import (
        get_user_state,
        get_all_user_ids,
        update_positions,
        redis_client
    )
    USER_STATE_AVAILABLE = True
except ImportError as e:
    st.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    USER_STATE_AVAILABLE = False

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(90deg, #1e3c72, #2a5298);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    
    .positive {
        color: #00C851;
        font-weight: bold;
    }
    
    .negative {
        color: #ff4444;
        font-weight: bold;
    }
    
    .neutral {
        color: #ffbb33;
        font-weight: bold;
    }
    
    .stSelectbox > div > div {
        background-color: #f0f2f6;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<h1 class="main-header">üöÄ Portfolio Assistant</h1>', unsafe_allow_html=True)
st.markdown("---")

# Sidebar –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

# –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
selected_user_id = None
user_state = None

if USER_STATE_AVAILABLE:
    st.sidebar.subheader("üë§ –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    def get_user_list():
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Redis"""
        try:
            user_ids = get_all_user_ids()
            if user_ids:
                return sorted(user_ids)
            return []
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    user_ids = get_user_list()
    
    if user_ids:
        # –í—ã–±–æ—Ä –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_option = st.sidebar.radio(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
            ["–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–í–≤–µ—Å—Ç–∏ User ID", "–ù–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"]
        )
        
        if user_option == "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
            selected_user_id = st.sidebar.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                options=user_ids,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞"
            )
        elif user_option == "–í–≤–µ—Å—Ç–∏ User ID":
            selected_user_id = st.sidebar.number_input(
                "–í–≤–µ–¥–∏—Ç–µ User ID:",
                min_value=1,
                value=1,
                help="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é"
            )
        else:  # –ù–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
            selected_user_id = None
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ ID
        user_option = st.sidebar.radio(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
            ["–í–≤–µ—Å—Ç–∏ User ID", "–ù–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"]
        )
        
        if user_option == "–í–≤–µ—Å—Ç–∏ User ID":
            selected_user_id = st.sidebar.number_input(
                "–í–≤–µ–¥–∏—Ç–µ User ID:",
                min_value=1,
                value=1,
                help="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é"
            )
        else:
            selected_user_id = None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
    if selected_user_id:
        try:
            user_state = get_user_state(selected_user_id)
            st.sidebar.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            with st.sidebar.expander("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"):
                st.write(f"**Risk Profile:** {user_state.get('risk_profile', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                st.write(f"**Budget:** ${user_state.get('budget', 0):,.2f}")
                positions = user_state.get('positions', {})
                st.write(f"**–ü–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ:** {len(positions)}")
                if positions:
                    st.write("**–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:**")
                    for ticker, amount in list(positions.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        st.write(f"‚Ä¢ {ticker}: {amount:.2f}")
                    if len(positions) > 5:
                        st.write(f"... –∏ –µ—â–µ {len(positions)-5}")
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            user_state = None
else:
    st.sidebar.info("üí° –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–Ω–∞–ø—à–æ—Ç–æ–≤
def get_available_snapshots():
    snapshots_dir = "./local/snapshots"
    if os.path.exists(snapshots_dir):
        files = [f for f in os.listdir(snapshots_dir) if f.endswith('.json')]
        return sorted(files, reverse=True)  # –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
    return []

# –í—ã–±–æ—Ä —Å–Ω–∞–ø—à–æ—Ç–∞
snapshots = get_available_snapshots()
if snapshots:
    selected_snapshot = st.sidebar.selectbox(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∞–ø—à–æ—Ç –¥–∞–Ω–Ω—ã—Ö",
        options=snapshots,
        index=0,
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∞–ø—à–æ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    snapshot_id = selected_snapshot.replace('.json', '')
else:
    st.sidebar.error("‚ö†Ô∏è –°–Ω–∞–ø—à–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    st.stop()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
st.sidebar.subheader("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

optimization_method = st.sidebar.selectbox(
    "–ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
    ["hrp", "markowitz", "black_litterman"],
    index=0,
    help="HRP - –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∏—Ç–µ—Ç —Ä–∏—Å–∫–∞, Markowitz - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
)

risk_free_rate = st.sidebar.slider(
    "–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (%)",
    min_value=0.0,
    max_value=5.0,
    value=0.1,
    step=0.1,
    help="–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –®–∞—Ä–ø–∞"
) / 100

max_weight = st.sidebar.slider(
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∞–∫—Ç–∏–≤–∞ (%)",
    min_value=5,
    max_value=50,
    value=40,
    step=5,
    help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"
) / 100

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_snapshot_data(snapshot_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞–ø—à–æ—Ç–∞"""
    try:
        with open(f"./local/snapshots/{snapshot_id}.json", 'r') as f:
            data = json.load(f)
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–Ω–∞–ø—à–æ—Ç–∞: {e}")
        return None

@st.cache_data
def optimize_portfolio(method, snapshot_id, risk_free, max_w):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    return optimize_tool(
        method=method,
        snapshot_id=snapshot_id,
        risk_free_rate=risk_free,
        max_weight=max_w
    )

@st.cache_data
def get_performance_data(weights, risk_free):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return performance_tool(weights=weights, risk_free_rate=risk_free)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç–∞
    snapshot_data = load_snapshot_data(snapshot_id)
    if not snapshot_data:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìä –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è", 
        "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", 
        "üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 
        "üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã",
        "üóÉÔ∏è –°–Ω–∞–ø—à–æ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "üì± Telegram –æ—Ç—á–µ—Ç"
    ])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
    optimization_results = None
    performance_results = None
    
    with tab1:
        show_portfolio_overview(snapshot_data, user_state, selected_user_id)
    
    with tab2:
        optimization_results = show_optimization_results(snapshot_data, user_state, selected_user_id)
    
    with tab3:
        performance_results = show_performance_analysis(user_state, selected_user_id)
    
    with tab4:
        show_forecasts(snapshot_data)
    
    with tab5:
        show_snapshot_details(snapshot_data)
    
    with tab6:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ session state –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        opt_results = st.session_state.get('optimization_results', optimization_results)
        perf_results = st.session_state.get('performance_results', performance_results)
        show_telegram_sender(opt_results, snapshot_data, perf_results)

def show_portfolio_overview(snapshot_data, user_state, selected_user_id):
    """–û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    st.header("üìä –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—å
    if user_state and user_state.get('positions'):
        positions = user_state.get('positions', {})
        budget = user_state.get('budget', 0)
        
        st.subheader(f"üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
        prices = snapshot_data.get('prices', {})
        total_value = 0
        portfolio_data = []
        
        for ticker, shares in positions.items():
            price = prices.get(ticker, 100.0)  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–Ω–∞ –µ—Å–ª–∏ –Ω–µ—Ç –≤ —Å–Ω–∞–ø—à–æ—Ç–µ
            value = shares * price
            total_value += value
            
            portfolio_data.append({
                '–¢–∏–∫–µ—Ä': ticker,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π': shares,
                '–¶–µ–Ω–∞ –∑–∞ –∞–∫—Ü–∏—é': price,
                '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å': value,
                '–î–æ–ª—è (%)': 0  # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ
            })
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª–∏
        for item in portfolio_data:
            item['–î–æ–ª—è (%)'] = (item['–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å'] / total_value * 100) if total_value > 0 else 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è", f"${total_value:,.2f}")
        with col2:
            st.metric("üéØ –ë—é–¥–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"${budget:,.2f}")
        with col3:
            usage_pct = (total_value / budget * 100) if budget > 0 else 0
            st.metric("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞", f"{usage_pct:.1f}%")
        with col4:
            st.metric("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π", len(positions))
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        if portfolio_data:
            df_portfolio = pd.DataFrame(portfolio_data)
            st.dataframe(
                df_portfolio.style.format({
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π': '{:.4f}',
                    '–¶–µ–Ω–∞ –∑–∞ –∞–∫—Ü–∏—é': '${:.2f}',
                    '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å': '${:,.2f}',
                    '–î–æ–ª—è (%)': '{:.2f}%'
                }),
                use_container_width=True
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
            fig = px.pie(
                df_portfolio,
                values='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
                names='–¢–∏–∫–µ—Ä',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("---")
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–Ω–∞–ø—à–æ—Ç–µ
    st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    meta = snapshot_data.get('meta', {})
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üìÖ –î–∞—Ç–∞ —Å–Ω–∞–ø—à–æ—Ç–∞",
            meta.get('timestamp', 'N/A')[:10] if meta.get('timestamp') else 'N/A'
        )
    
    with col2:
        st.metric(
            "üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤",
            len(snapshot_data.get('mu', {}))
        )
    
    with col3:
        st.metric(
            "‚è±Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞",
            f"{meta.get('horizon_days', 'N/A')} –¥–Ω–µ–π"
        )
    
    with col4:
        st.metric(
            "üéØ –°—Ä–µ–¥–Ω—è—è –æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
            f"{np.mean(list(snapshot_data.get('mu', {}).values())) * 100:.2f}%"
        )
    
    st.markdown("---")
    
    # –¢–æ–ø –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    st.subheader("üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
    
    mu_data = snapshot_data.get('mu', {})
    if mu_data:
        df_returns = pd.DataFrame(list(mu_data.items()), columns=['–¢–∏–∫–µ—Ä', '–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å'])
        df_returns['–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'] = df_returns['–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å'] * 100
        df_returns = df_returns.sort_values('–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', ascending=False)
        
        # –¢–æ–ø 10 –∏ –∞—É—Ç—Å–∞–π–¥–µ—Ä—ã
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**üî• –¢–æ–ø 10 –ª–∏–¥–µ—Ä–æ–≤:**")
            top_10 = df_returns.head(10)
            
            fig = px.bar(
                top_10, 
                x='–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', 
                y='–¢–∏–∫–µ—Ä',
                orientation='h',
                color='–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                color_continuous_scale='RdYlGn',
                title="–õ—É—á—à–∏–µ –∞–∫—Ç–∏–≤—ã"
            )
            fig.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.write("**üìâ –¢–æ–ø 10 –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤:**")
            bottom_10 = df_returns.tail(10)
            
            fig = px.bar(
                bottom_10, 
                x='–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', 
                y='–¢–∏–∫–µ—Ä',
                orientation='h',
                color='–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                color_continuous_scale='RdYlGn',
                title="–•—É–¥—à–∏–µ –∞–∫—Ç–∏–≤—ã"
            )
            fig.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

def show_optimization_results(snapshot_data, user_state, selected_user_id):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    st.header("‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    # –û–ø—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_source = st.radio(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:",
        ["–ù–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"] if user_state and user_state.get('positions') else ["–ù–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"]
    )
    
    input_tickers = []
    
    if optimization_source == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" and user_state:
        positions = user_state.get('positions', {})
        input_tickers = list(positions.keys())
        st.info(f"üìä –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å {len(input_tickers)} –∞–∫—Ç–∏–≤–∞–º–∏: {', '.join(input_tickers[:5])}{'...' if len(input_tickers) > 5 else ''}")
    else:
        st.info("üÜï –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    with st.spinner("üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å..."):
        if input_tickers:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
            result = optimize_tool(
                tickers=input_tickers,
                snapshot_id=snapshot_id,
                method=optimization_method,
                risk_aversion=1.0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ sidebar
            )
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            result = optimize_tool(
                method=optimization_method, 
                snapshot_id=snapshot_id, 
                risk_free_rate=risk_free_rate, 
                max_weight=max_weight
            )
    
    if result.get('error'):
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {result['error']}")
        return None
    
    weights = result.get('weights', {})
    if not weights:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        return None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session state
    st.session_state.optimization_results = result
    st.session_state.portfolio_weights = weights
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üìà –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
            f"{result.get('exp_ret', 0) * 100:.2f}%",
            help="–ì–æ–¥–æ–≤–∞—è –æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è"
        )
    
    with col2:
        st.metric(
            "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
            f"{result.get('risk', 0) * 100:.2f}%",
            help="–ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è"
        )
    
    with col3:
        sharpe = result.get('sharpe', 0)
        sharpe_color = "normal"
        if sharpe > 1:
            sharpe_color = "normal"
        elif sharpe > 0.5:
            sharpe_color = "normal"
        
        st.metric(
            "üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞",
            f"{sharpe:.3f}",
            help="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–∑–±—ã—Ç–æ—á–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∫ —Ä–∏—Å–∫—É"
        )
    
    with col4:
        st.metric(
            "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π",
            len([w for w in weights.values() if w > 0.001]),
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤ —Å –≤–µ—Å–æ–º > 0.1%"
        )
    
    st.markdown("---")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("ü•ß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤—ã —Å –≤–µ—Å–æ–º > 1%
        significant_weights = {k: v for k, v in weights.items() if v > 0.01}
        other_weight = sum(v for v in weights.values() if v <= 0.01)
        
        if other_weight > 0:
            significant_weights['–ü—Ä–æ—á–∏–µ'] = other_weight
        
        # Pie chart
        fig = go.Figure(data=[go.Pie(
            labels=list(significant_weights.keys()),
            values=list(significant_weights.values()),
            hole=0.4,
            textinfo='label+percent',
            textposition='auto',
            hovertemplate='<b>%{label}</b><br>–í–µ—Å: %{value:.1%}<extra></extra>'
        )])
        
        fig.update_layout(
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
            font=dict(size=14),
            showlegend=True,
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞")
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–µ—Å–æ–≤
        df_weights = pd.DataFrame([
            {'–¢–∏–∫–µ—Ä': ticker, '–í–µ—Å (%)': weight * 100}
            for ticker, weight in sorted(weights.items(), key=lambda x: x[1], reverse=True)
            if weight > 0.001
        ])
        
        st.dataframe(
            df_weights,
            use_container_width=True,
            height=400
        )
    
    # Risk-Return scatter
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
    
    mu_data = snapshot_data.get('mu', {})
    sigma_data = snapshot_data.get('sigma', {})
    
    if mu_data and sigma_data:
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è scatter plot
        tickers = []
        returns = []
        risks = []
        portfolio_weights_list = []
        
        for ticker in mu_data.keys():
            if ticker in sigma_data:
                tickers.append(ticker)
                returns.append(mu_data[ticker] * 100)
                risks.append(np.sqrt(sigma_data[ticker][ticker]) * 100)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                portfolio_weights_list.append(weights.get(ticker, 0) * 100)
        
        # Scatter plot
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –∞–∫—Ç–∏–≤–æ–≤
        fig.add_trace(go.Scatter(
            x=risks,
            y=returns,
            mode='markers',
            marker=dict(
                size=[max(w*2, 5) for w in portfolio_weights_list],  # –†–∞–∑–º–µ—Ä –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –≤–µ—Å—É
                color=portfolio_weights_list,
                colorscale='Viridis',
                colorbar=dict(title="–í–µ—Å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ (%)"),
                line=dict(width=1, color='white')
            ),
            text=tickers,
            hovertemplate='<b>%{text}</b><br>–†–∏—Å–∫: %{x:.2f}%<br>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: %{y:.2f}%<extra></extra>',
            name='–ê–∫—Ç–∏–≤—ã'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_return = result.get('exp_ret', 0) * 100
        portfolio_risk = result.get('risk', 0) * 100
        
        fig.add_trace(go.Scatter(
            x=[portfolio_risk],
            y=[portfolio_return],
            mode='markers',
            marker=dict(
                size=20,
                color='red',
                symbol='star',
                line=dict(width=2, color='white')
            ),
            name='–ü–æ—Ä—Ç—Ñ–µ–ª—å',
            hovertemplate='<b>–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å</b><br>–†–∏—Å–∫: %{x:.2f}%<br>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: %{y:.2f}%<extra></extra>'
        ))
        
        fig.update_layout(
            title="–ö–∞—Ä—Ç–∞ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
            xaxis_title="–†–∏—Å–∫ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å), %",
            yaxis_title="–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, %",
            height=500,
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.info("üí° –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É 'üì± Telegram –æ—Ç—á–µ—Ç' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if USER_STATE_AVAILABLE and selected_user_id:
        st.markdown("---")
        st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        budget = user_state.get('budget', 10000) if user_state else 10000
        budget_input = st.number_input(
            "–ë—é–¥–∂–µ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π ($):",
            min_value=100,
            value=budget,
            step=100,
            help="–ë—é–¥–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–µ—Å–æ–≤ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π"
        )
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", type="primary"):
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏
                from portfolio_assistant.src.market_snapshot.registry import SnapshotRegistry
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ —Å–Ω–∞–ø—à–æ—Ç–∞
                registry = SnapshotRegistry()
                snapshot = registry.load(snapshot_id)
                prices = {}
                if snapshot and hasattr(snapshot, 'prices') and snapshot.prices:
                    prices = snapshot.prices
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏
                new_positions = {}
                total_allocated = 0.0
                
                for ticker, weight_percent in weights.items():
                    stock_price = prices.get(ticker, 100.0)
                    allocation_amount = budget_input * weight_percent
                    shares_count = allocation_amount / stock_price
                    new_positions[ticker] = shares_count
                    total_allocated += allocation_amount
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success = update_positions(selected_user_id, new_positions)
                
                if success:
                    st.success(f"‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user_id}!")
                    st.info(f"üí∞ –û–±—â–µ–µ –≤–ª–æ–∂–µ–Ω–∏–µ: ${total_allocated:,.2f} –∏–∑ ${budget_input:,.2f} ({(total_allocated/budget_input)*100:.1f}%)")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    with st.expander("üìä –î–µ—Ç–∞–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"):
                        for ticker, shares in new_positions.items():
                            price = prices.get(ticker, 100.0)
                            value = shares * price
                            weight = weights.get(ticker, 0) * 100
                            st.write(f"**{ticker}:** {shares:.4f} –∞–∫—Ü–∏–π √ó ${price:.2f} = ${value:.2f} ({weight:.2f}%)")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    return result

def show_performance_analysis(user_state, selected_user_id):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    st.header("üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ—Å–æ–≤ –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if 'portfolio_weights' not in st.session_state:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'")
        return None
    
    weights = st.session_state.portfolio_weights
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    col1, col2 = st.columns(2)
    
    with col1:
        start_date = st.date_input(
            "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞",
            value=datetime.now() - timedelta(days=90),
            help="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        )
    
    with col2:
        end_date = st.date_input(
            "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞",
            value=datetime.now(),
            help="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        )
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    with st.spinner("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å..."):
        perf_result = performance_tool(
            weights=weights,
            start_date=start_date.strftime("%Y-%m-%d"),
            end_date=end_date.strftime("%Y-%m-%d"),
            risk_free_rate=risk_free_rate
        )
    
    if perf_result.get('error'):
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {perf_result['error']}")
        return None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session state
    st.session_state.performance_results = perf_result
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        ann_return = perf_result.get('portfolio_return_annualized', 0)
        st.metric(
            "üìà –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
            f"{ann_return * 100:.2f}%",
            delta=f"vs –±–µ–Ω—á–º–∞—Ä–∫: {(ann_return - perf_result.get('benchmark_return', 0)) * 100:.2f}%"
        )
    
    with col2:
        volatility = perf_result.get('portfolio_volatility_annualized', 0)
        st.metric(
            "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
            f"{volatility * 100:.2f}%"
        )
    
    with col3:
        sharpe = perf_result.get('sharpe_ratio', 0)
        st.metric(
            "üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞",
            f"{sharpe:.3f}"
        )
    
    with col4:
        max_dd = perf_result.get('max_drawdown', 0)
        st.metric(
            "üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞",
            f"{max_dd * 100:.2f}%"
        )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    
    with col1:
        alpha = perf_result.get('alpha', 0)
        st.metric(
            "Œ± Alpha",
            f"{alpha * 100:.2f}%",
            help="–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—ã–Ω–∫–∞"
        )
    
    with col2:
        beta = perf_result.get('beta', 0)
        st.metric(
            "Œ≤ Beta",
            f"{beta:.3f}",
            help="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä—ã–Ω–æ—á–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏—è–º"
        )
    
    with col3:
        total_return = perf_result.get('total_return', 0)
        st.metric(
            "üìä –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
            f"{total_return * 100:.2f}%",
            help=f"–ó–∞ –ø–µ—Ä–∏–æ–¥ {perf_result.get('analysis_period', 'N/A')}"
        )
    
    st.markdown("---")
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ (—Ç–æ–ø-10 –ø–æ –≤–µ—Å—É)
    st.subheader("üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤")
    
    # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –≤–µ—Å—É
    top_assets = sorted(weights.items(), key=lambda x: x[1], reverse=True)[:10]
    asset_tickers = [asset[0] for asset in top_assets]
    
    if len(asset_tickers) > 0:
        with st.spinner("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ..."):
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = yf.download(
                    asset_tickers,
                    start=start_date,
                    end=end_date,
                    progress=False
                )['Close']
                
                if not data.empty:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                    normalized_data = data / data.iloc[0] * 100
                    
                    # –ì—Ä–∞—Ñ–∏–∫
                    fig = go.Figure()
                    
                    for ticker in asset_tickers:
                        if ticker in normalized_data.columns:
                            weight_pct = weights[ticker] * 100
                            fig.add_trace(go.Scatter(
                                x=normalized_data.index,
                                y=normalized_data[ticker],
                                name=f"{ticker} ({weight_pct:.1f}%)",
                                line=dict(width=2),
                                hovertemplate=f'<b>{ticker}</b><br>–î–∞—Ç–∞: %{{x}}<br>–¶–µ–Ω–∞: %{{y:.2f}}<extra></extra>'
                            ))
                    
                    fig.update_layout(
                        title="–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∫ 100)",
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–¶–µ–Ω–∞ (–±–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å = 100)",
                        height=500,
                        hovermode='x unified'
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    return perf_result

def show_forecasts(snapshot_data):
    """–ü—Ä–æ–≥–Ω–æ–∑—ã"""
    st.header("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ —Å—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    if 'portfolio_weights' not in st.session_state:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'")
        return
    
    weights = st.session_state.portfolio_weights
    
    # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    available_assets = list(weights.keys())
    top_assets_tickers = [item[0] for item in sorted(weights.items(), key=lambda x: x[1], reverse=True)[:5]]
    selected_assets = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞",
        available_assets,
        default=top_assets_tickers  # –¢–æ–ø-5 –ø–æ –≤–µ—Å—É (—Ç–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä—ã)
    )
    
    if not selected_assets:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
    col1, col2 = st.columns(2)
    
    with col1:
        forecast_horizon = st.selectbox(
            "–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞",
            [30, 60, 90, 180],
            index=2,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"
        )
    
    with col2:
        confidence_level = st.slider(
            "–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è (%)",
            min_value=80,
            max_value=99,
            value=95,
            help="–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"
        )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    mu_data = snapshot_data.get('mu', {})
    sigma_data = snapshot_data.get('sigma', {})
    
    if mu_data and sigma_data:
        st.subheader("üìä –°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        scenarios = {
            "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π": 1.5,
            "–ë–∞–∑–æ–≤—ã–π": 1.0,
            "–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π": 0.5
        }
        
        scenario_results = []
        
        for scenario_name, multiplier in scenarios.items():
            portfolio_return = 0
            portfolio_risk = 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
            for asset in selected_assets:
                if asset in mu_data and asset in weights:
                    asset_return = mu_data[asset] * multiplier
                    asset_weight = weights[asset]
                    portfolio_return += asset_return * asset_weight
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            for i, asset1 in enumerate(selected_assets):
                for j, asset2 in enumerate(selected_assets):
                    if asset1 in sigma_data and asset2 in sigma_data[asset1]:
                        w1 = weights.get(asset1, 0)
                        w2 = weights.get(asset2, 0)
                        cov = sigma_data[asset1][asset2]
                        portfolio_risk += w1 * w2 * cov
            
            portfolio_risk = np.sqrt(portfolio_risk) if portfolio_risk > 0 else 0
            
            scenario_results.append({
                '–°—Ü–µ–Ω–∞—Ä–∏–π': scenario_name,
                '–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)': portfolio_return * 100,
                '–†–∏—Å–∫ (%)': portfolio_risk * 100,
                '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞': (portfolio_return - risk_free_rate) / portfolio_risk if portfolio_risk > 0 else 0
            })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        df_scenarios = pd.DataFrame(scenario_results)
        
        fig = go.Figure()
        
        colors = ['green', 'blue', 'red']
        for i, scenario in enumerate(scenario_results):
            fig.add_trace(go.Bar(
                name=scenario['–°—Ü–µ–Ω–∞—Ä–∏–π'],
                x=['–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', '–†–∏—Å–∫ (%)', '–ö–æ—ç—Ñ. –®–∞—Ä–ø–∞'],
                y=[scenario['–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'], scenario['–†–∏—Å–∫ (%)'], scenario['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞']],
                marker_color=colors[i],
                opacity=0.8
            ))
        
        fig.update_layout(
            title="–°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
            xaxis_title="–ú–µ—Ç—Ä–∏–∫–∏",
            yaxis_title="–ó–Ω–∞—á–µ–Ω–∏—è",
            barmode='group',
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        st.dataframe(df_scenarios, use_container_width=True)

def show_snapshot_details(snapshot_data):
    """–î–µ—Ç–∞–ª–∏ —Å–Ω–∞–ø—à–æ—Ç–∞"""
    st.header("üóÉÔ∏è –î–µ—Ç–∞–ª–∏ —Å–Ω–∞–ø—à–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    meta = snapshot_data.get('meta', {})
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
        st.json(meta)
    
    with col2:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        mu_data = snapshot_data.get('mu', {})
        sigma_data = snapshot_data.get('sigma', {})
        
        if mu_data:
            returns = list(mu_data.values())
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏", f"{np.mean(returns)*100:.2f}%")
            st.metric("–ú–µ–¥–∏–∞–Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏", f"{np.median(returns)*100:.2f}%")
            st.metric("–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏", f"{np.std(returns)*100:.2f}%")
            st.metric("–ú–∏–Ω. –æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{np.min(returns)*100:.2f}%")
            st.metric("–ú–∞–∫—Å. –æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{np.max(returns)*100:.2f}%")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìà –û–∂–∏–¥–∞–µ–º—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤")
    
    if mu_data:
        df_full = pd.DataFrame([
            {
                '–¢–∏–∫–µ—Ä': ticker,
                '–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)': ret * 100,
                '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)': np.sqrt(sigma_data.get(ticker, {}).get(ticker, 0)) * 100 if sigma_data else 0
            }
            for ticker, ret in mu_data.items()
        ])
        
        df_full = df_full.sort_values('–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', ascending=False)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        def color_negative_red(val):
            color = 'red' if val < 0 else 'green' if val > 10 else 'black'
            return f'color: {color}'
        
        styled_df = df_full.style.map(color_negative_red, subset=['–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'])
        
        st.dataframe(styled_df, use_container_width=True, height=600)
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (–¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 –∞–∫—Ç–∏–≤–æ–≤)
    if sigma_data:
        st.subheader("üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (—Ç–æ–ø-20 –∞–∫—Ç–∏–≤–æ–≤)")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –∞–∫—Ç–∏–≤–æ–≤
        top_assets = list(sigma_data.keys())[:20]
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        corr_matrix = []
        for asset1 in top_assets:
            row = []
            for asset2 in top_assets:
                if asset1 in sigma_data and asset2 in sigma_data[asset1]:
                    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è = –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è / (—Å—Ç–¥1 * —Å—Ç–¥2)
                    cov = sigma_data[asset1][asset2]
                    std1 = np.sqrt(sigma_data[asset1][asset1])
                    std2 = np.sqrt(sigma_data[asset2][asset2])
                    corr = cov / (std1 * std2) if std1 > 0 and std2 > 0 else 0
                    row.append(corr)
                else:
                    row.append(0)
            corr_matrix.append(row)
        
        # Heatmap
        fig = go.Figure(data=go.Heatmap(
            z=corr_matrix,
            x=top_assets,
            y=top_assets,
            colorscale='RdBu',
            zmid=0,
            hovertemplate='%{x} vs %{y}<br>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: %{z:.3f}<extra></extra>'
        ))
        
        fig.update_layout(
            title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∞–∫—Ç–∏–≤–æ–≤",
            height=600
        )
        
        st.plotly_chart(fig, use_container_width=True)

def show_telegram_sender(optimization_results, snapshot_data, performance_results=None):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram"""
    
    if not TELEGRAM_AVAILABLE:
        st.warning("üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É python-telegram-bot:")
        st.code("pip install python-telegram-bot")
        return
    
    st.header("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if not optimization_results or optimization_results.get('error'):
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'")
        return
    
    st.markdown("""
    –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é –ø—Ä—è–º–æ –≤ Telegram! 
    
    **–ß—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:**
    - üìà –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    - üìä –ö—Ä–∞—Å–∏–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è  
    - üìÑ JSON —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """)
    
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ Chat ID
    col1, col2 = st.columns([2, 1])
    
    with col1:
        chat_id = st.text_input(
            "üÜî Telegram Chat ID –∏–ª–∏ @username",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Chat ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789) –∏–ª–∏ @username",
            help="–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à Chat ID, –Ω–∞–ø–∏—à–∏—Ç–µ @userinfobot –≤ Telegram"
        )
    
    with col2:
        st.markdown("<br>", unsafe_allow_html=True)  # –û—Ç—Å—Ç—É–ø
        if st.button("üß™ –¢–µ—Å—Ç"):
            if chat_id and validate_telegram_chat_id(chat_id):
                with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."):
                    success = test_telegram_sync(chat_id)
                    if success:
                        st.success("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω.")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Chat ID.")
            else:
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Chat ID")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    include_performance = st.checkbox(
        "üìä –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        value=bool(performance_results and not performance_results.get('error')),
        help="–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—á–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    )
    
    include_chart = st.checkbox(
        "üìà –í–∫–ª—é—á–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—è",
        value=True,
        help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤—É—é –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è"
    )
    
    # –ü—Ä–µ–≤—å—é –æ—Ç—á–µ—Ç–∞
    with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞"):
        if TELEGRAM_AVAILABLE:
            try:
                from telegram_integration import format_portfolio_report
                preview_text = format_portfolio_report(
                    optimization_results,
                    snapshot_data,
                    performance_results if include_performance else None
                )
                st.markdown(preview_text)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col2:
        if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram", type="primary", use_container_width=True):
            if not chat_id:
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ Chat ID")
                return
                
            if not validate_telegram_chat_id(chat_id):
                st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID")
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            perf_data = performance_results if include_performance and performance_results and not performance_results.get('error') else None
            
            with st.spinner("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram..."):
                success = send_portfolio_report_sync(
                    chat_id=chat_id,
                    optimization_results=optimization_results,
                    snapshot_data=snapshot_data,
                    performance_results=perf_data
                )
                
                if success:
                    st.success("üéâ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
                    st.balloons()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Chat ID –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
                    if 'telegram_chat_id' not in st.session_state:
                        st.session_state.telegram_chat_id = chat_id
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ Chat ID.")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é Chat ID
    with st.expander("‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Chat ID?"):
        st.markdown("""
        **–°–ø–æ—Å–æ–± 1 - –ß–µ—Ä–µ–∑ –±–æ—Ç–∞ @userinfobot:**
        1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @userinfobot –≤ Telegram
        2. –ù–∞–∂–º–∏—Ç–µ /start
        3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à User ID
        
        **–°–ø–æ—Å–æ–± 2 - –ß–µ—Ä–µ–∑ –±–æ—Ç–∞ @getidsbot:**
        1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @getidsbot –≤ Telegram  
        2. –ù–∞–∂–º–∏—Ç–µ /start
        3. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à Chat ID
        
        **–°–ø–æ—Å–æ–± 3 - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @username:**
        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π username, –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @–≤–∞—à_username
        
        **–î–ª—è –≥—Ä—É–ø–ø:**
        –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã
        """)

if __name__ == "__main__":
    main() 