#!/usr/bin/env python3
"""
üöÄ Portfolio Assistant Launcher
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""

import os
import sys
import subprocess
import webbrowser
import time
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def check_virtual_env():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        return True
    else:
        print("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        venv_path = Path("venv")
        if venv_path.exists():
            print("üí° –ù–∞–π–¥–µ–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫–µ 'venv'")
            if sys.platform == "win32":
                activate_cmd = "venv\\Scripts\\activate.bat"
            else:
                activate_cmd = "source venv/bin/activate"
            print(f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: {activate_cmd}")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    required_packages = [
        ('streamlit', 'streamlit'),
        ('plotly', 'plotly'), 
        ('pandas', 'pandas'),
        ('numpy', 'numpy'),
        ('yfinance', 'yfinance'),
        ('python-telegram-bot', 'telegram'),
        ('kaleido', 'kaleido'),
        ('scikit-learn', 'sklearn'),
        ('fastapi', 'fastapi'),
        ('sqlalchemy', 'sqlalchemy')
    ]
    
    missing_packages = []
    
    for package_name, import_name in required_packages:
        try:
            __import__(import_name)
            print(f"   ‚úÖ {package_name}")
        except ImportError:
            print(f"   ‚ùå {package_name}")
            missing_packages.append(package_name)
    
    if missing_packages:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"   pip install {' '.join(missing_packages)}")
        return False
    
    return True

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env"""
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º Telegram –±–æ—Ç–∞:")
        print("   TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        return False
    
    print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
    return True

def check_snapshots():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤"""
    snapshots_dir = Path("local/snapshots")
    if not snapshots_dir.exists():
        print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    snapshots = list(snapshots_dir.glob("*.json"))
    if not snapshots:
        print("‚ö†Ô∏è  –°–Ω–∞–ø—à–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ local/snapshots/")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(snapshots)} —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
    return True

def launch_streamlit():
    """–ó–∞–ø—É—Å–∫ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Portfolio Assistant...")
    print("   –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Streamlit
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        def open_browser():
            time.sleep(3)
            webbrowser.open("http://localhost:8501")
        
        import threading
        browser_thread = threading.Thread(target=open_browser)
        browser_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Streamlit
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", "streamlit_app.py",
            "--server.port=8501",
            "--server.headless=false",
            "--browser.gatherUsageStats=false"
        ])
        
    except KeyboardInterrupt:
        print("\n\nüëã Portfolio Assistant –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üöÄ PORTFOLIO ASSISTANT LAUNCHER")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    checks = [
        ("Python –≤–µ—Ä—Å–∏—è", check_python_version),
        ("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", check_virtual_env),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_requirements),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_env_file),
        ("–î–∞–Ω–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç–æ–≤", check_snapshots)
    ]
    
    passed_checks = 0
    total_checks = len(checks)
    
    for name, check_func in checks:
        print(f"\nüìã {name}:")
        if check_func():
            passed_checks += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed_checks}/{total_checks}")
    
    if passed_checks == total_checks:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        launch_streamlit()
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—Ç—è—Ç –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        try:
            response = input("\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ? (y/n): ")
            if response.lower() in ['y', 'yes', '–¥–∞', '–¥']:
                print("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫...")
                launch_streamlit()
        except KeyboardInterrupt:
            print("\nüëã –û—Ç–º–µ–Ω–µ–Ω–æ")

if __name__ == "__main__":
    main() 