"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Streamlit —Å Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
"""

import json
import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime
import os
from dotenv import load_dotenv

import telegram
from telegram.constants import ParseMode
import plotly.graph_objects as go
import plotly.io as pio
import pandas as pd

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

# Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DISCLAIMER = (
    "‚ö†Ô∏è *–î–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ "
    "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π. "
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–æ–ø—Ä—è–∂–µ–Ω—ã —Å —Ä–∏—Å–∫–æ–º.*"
)

def format_portfolio_report(
    optimization_results: Dict,
    snapshot_data: Dict,
    performance_results: Optional[Dict] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    """
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    report = "üìà *–û–¢–ß–ï–¢ –ü–û –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ú–£ –ü–û–†–¢–§–ï–õ–Æ*\n\n"
    
    # –î–∞—Ç–∞ –∏ –º–µ—Ç–æ–¥
    report += f"üìÖ *–î–∞—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
    report += f"‚ö° *–ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:* {optimization_results.get('method', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    report += "üí∞ *–û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:*\n"
    report += f"‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: *{optimization_results.get('exp_ret', 0) * 100:.2f}%* (–≥–æ–¥)\n"
    report += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: *{optimization_results.get('risk', 0) * 100:.2f}%* (–≥–æ–¥)\n"
    report += f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: *{optimization_results.get('sharpe', 0):.3f}*\n"
    
    weights = optimization_results.get('weights', {})
    if weights:
        report += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: *{len([w for w in weights.values() if w > 0.001])}*\n\n"
        
        # –¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏
        report += "üèÜ *–¢–û–ü-10 –ü–û–ó–ò–¶–ò–ô:*\n"
        sorted_weights = sorted(weights.items(), key=lambda x: x[1], reverse=True)[:10]
        
        for i, (ticker, weight) in enumerate(sorted_weights, 1):
            if weight > 0.001:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                report += f"{i}. *{ticker}*: {weight * 100:.2f}%\n"
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if performance_results and not performance_results.get('error'):
        report += "\nüìä *–ò–°–¢–û–†–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:*\n"
        report += f"‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: *{performance_results.get('portfolio_return_annualized', 0) * 100:.2f}%*\n"
        report += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: *{performance_results.get('max_drawdown', 0) * 100:.2f}%*\n"
        report += f"‚Ä¢ Alpha: *{performance_results.get('alpha', 0) * 100:.2f}%*\n"
        report += f"‚Ä¢ Beta: *{performance_results.get('beta', 0):.3f}*\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–Ω–∞–ø—à–æ—Ç–µ
    meta = snapshot_data.get('meta', {})
    if meta:
        report += "\nüóÉÔ∏è *–î–ê–ù–ù–´–ï –°–ù–ê–ü–®–û–¢–ê:*\n"
        report += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤: *{len(snapshot_data.get('mu', {}))}*\n"
        report += f"‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: *{meta.get('horizon_days', 'N/A')} –¥–Ω–µ–π*\n"
        if meta.get('timestamp'):
            report += f"‚Ä¢ –î–∞—Ç–∞ —Å–Ω–∞–ø—à–æ—Ç–∞: *{meta.get('timestamp')[:10]}*\n"
    
    # –î–∏—Å–∫–ª–µ–π–º–µ—Ä
    report += f"\n{DISCLAIMER}"
    
    return report


def create_portfolio_chart(weights: Dict[str, float]) -> bytes:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤—ã —Å –≤–µ—Å–æ–º > 1%
    significant_weights = {k: v for k, v in weights.items() if v > 0.01}
    other_weight = sum(v for v in weights.values() if v <= 0.01)
    
    if other_weight > 0:
        significant_weights['–ü—Ä–æ—á–∏–µ'] = other_weight
    
    # –°–æ–∑–¥–∞–µ–º pie chart
    fig = go.Figure(data=[go.Pie(
        labels=list(significant_weights.keys()),
        values=list(significant_weights.values()),
        hole=0.4,
        textinfo='label+percent',
        textposition='auto',
        textfont=dict(size=14),
        marker=dict(
            colors=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', 
                   '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9'],
            line=dict(color='white', width=2)
        )
    )])
    
    fig.update_layout(
        title=dict(
            text="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
            x=0.5,
            font=dict(size=18, color='darkblue')
        ),
        font=dict(size=12),
        showlegend=True,
        width=800,
        height=600,
        margin=dict(t=80, b=50, l=50, r=50)
    )
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img_bytes = pio.to_image(fig, format='png', engine='kaleido')
    return img_bytes


async def send_portfolio_to_telegram(
    chat_id: str,
    optimization_results: Dict,
    snapshot_data: Dict,
    performance_results: Optional[Dict] = None,
    include_chart: bool = True
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –≤ Telegram
    
    Args:
        chat_id: ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        optimization_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        snapshot_data: –î–∞–Ω–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç–∞
        performance_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        include_chart: –í–∫–ª—é—á–∏—Ç—å –ª–∏ –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
        
    Returns:
        True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
    """
    
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = telegram.Bot(token=TELEGRAM_TOKEN)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = format_portfolio_report(
            optimization_results, 
            snapshot_data, 
            performance_results
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await bot.send_message(
            chat_id=chat_id,
            text=report_text,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É (–µ—Å–ª–∏ requested)
        if include_chart and optimization_results.get('weights'):
            try:
                chart_bytes = create_portfolio_chart(optimization_results['weights'])
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=chart_bytes,
                    caption="üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
                await bot.send_message(
                    chat_id=chat_id,
                    text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"
                )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        portfolio_data = {
            'timestamp': datetime.now().isoformat(),
            'optimization_results': optimization_results,
            'snapshot_meta': snapshot_data.get('meta', {}),
            'performance_results': performance_results,
            'weights': optimization_results.get('weights', {}),
            'summary': {
                'expected_return': optimization_results.get('exp_ret', 0),
                'risk': optimization_results.get('risk', 0),
                'sharpe_ratio': optimization_results.get('sharpe', 0),
                'num_positions': len([w for w in optimization_results.get('weights', {}).values() if w > 0.001])
            }
        }
        
        json_data = json.dumps(portfolio_data, indent=2, ensure_ascii=False).encode('utf-8')
        
        await bot.send_document(
            chat_id=chat_id,
            document=json_data,
            filename=f"portfolio_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            caption="üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"
        )
        
        logger.info(f"–û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram —á–∞—Ç {chat_id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


def validate_telegram_chat_id(chat_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID —á–∞—Ç–∞ Telegram
    """
    if not chat_id:
        return False
        
    # ID —á–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @
    if chat_id.startswith('@'):
        return len(chat_id) > 1
    
    try:
        int(chat_id)
        return True
    except ValueError:
        return False


async def test_telegram_connection(chat_id: str) -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not TELEGRAM_TOKEN:
        return False
        
    try:
        bot = telegram.Bot(token=TELEGRAM_TOKEN)
        await bot.send_message(
            chat_id=chat_id,
            text="üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Portfolio Assistant —É—Å–ø–µ—à–µ–Ω! ‚úÖ",
            parse_mode=ParseMode.MARKDOWN
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ Streamlit
def send_portfolio_report_sync(
    chat_id: str,
    optimization_results: Dict,
    snapshot_data: Dict,
    performance_results: Optional[Dict] = None
) -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(
            send_portfolio_to_telegram(
                chat_id, 
                optimization_results, 
                snapshot_data, 
                performance_results
            )
        )
        loop.close()
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False


def test_telegram_sync(chat_id: str) -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(test_telegram_connection(chat_id))
        loop.close()
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False 